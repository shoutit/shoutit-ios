# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.80.0"

default_platform :ios

platform :ios do
  
  desc "Submit a new β-Staging build..."
  lane :stage do |options|    
    options[:slack_title] = "Successfully deployed β-Staging build"

    # build for staging
    beta(options)

    # upload crashlytics
    crashlytics
  end

  private_lane :beta do |options|
    # install pods
    sh "bundle exec pod install"

    # add identity
    unlock_keychain(password: "8kwz9bb77q")
    import_certificate(certificate_path: "artifacts/appunite-inhouse.p12", certificate_password:"")

    # download prov profiles for share extension
    udid = sigh(app_identifier: "com.appunite.shoutit.shoutitkit")
    ENV["SHARE_EXTENSIONS_UDID"] = udid
    
    # download prov profiles for app
    udid = sigh(app_identifier: "com.appunite.shoutit")
    ENV["PROJECT_UDID"] = udid
    
    # increase build number
    increment_build_number build_number: ENV["CI_BUILD_ID"]
    
    # build!
    gym

    # upload dSYM to crashlytics
    upload_symbols_to_crashlytics

    # upload artifacts
    au_artifacts_upload

    # send message to slack
    git_hash = `git rev-parse --short HEAD`
    slack(
      message: ENV["SLACK_TITLE"] + " (#{lane_context[SharedValues::BUILD_NUMBER]}).",
      attachment_properties: {
        fields: [{
          title: 'git-hash',
          value: git_hash,
          short: true
        }]
      }
    )

  end

  # =========================================
  # desc "create and upload ipa to crashlytics"
  # lane :production do
  #
  #   au_add_identity gs_certificate_path: ENV["GS_TF_CERTIFICATE_PATH"], certificate_password: ENV["CERTIFICATE_PASSWORD"]
  #
  #   `export SSL_CERT_FILE=/etc/openssl/ca-cert.pem`
  #
  #   ENV["SIGH_TEAM_ID"]="2857HUGC3W"
  #
  #   #download provisioning profile
  #   sigh
  #
  #   # setup provisioning profile
  #   ENV["PROFILE_UDID"] = Actions.lane_context[Actions::SharedValues::SIGH_UDID]
  #
  #   # increase build number
  #   build_no = `git rev-list --count HEAD`
  #   increment_build_number build_number: build_no
  #   build_no = build_no.to_s.delete!("\n")
  #
  #   #build app
  #   gym scheme: ENV["XCODE_SCHEME"], clean: true, configuration: "Distribution", use_legacy_build_api: true
  #
  #   #upload artifact
  #   au_artifacts_upload
  #
  #   #upload to testflight
  #   pilot(skip_submission: true, wait_processing_interval: 1, app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier))
  #
  #   #prepare git hash
  #   git_hash = `git rev-parse --short HEAD`
  #
  #   #send slack message
  #   slack(
  #     message: "New Shoutit Production (#{build_no}) processing on testflight.",
  #     attachment_properties: {
  #       fields: [{
  #         title: 'git-hash',
  #         value: git_hash,
  #         short: true
  #       }, {
  #         title: 'storage',
  #         short: true
  #       }]
  #     }
  #   )
  #
  # end
  #
  # lane :local do
  #   au_add_identity
  #
  #   `export SSL_CERT_FILE=/etc/openssl/ca-cert.pem`
  #
  #   ENV["SIGH_TEAM_ID"]="E6WRHQXQE9"
  #
  #   #download provisioning profile
  #   sigh
  #
  #   # setup provisioning profile
  #   ENV["PROFILE_UDID"] = Actions.lane_context[Actions::SharedValues::SIGH_UDID]
  #
  #   # increase build number
  #   build_no = `git rev-list --count HEAD`
  #   increment_build_number build_number: build_no
  #   build_no = build_no.to_s.delete!("\n")
  #
  #   #build app
  #   gym scheme: ENV["XCODE_SCHEME_LOCAL"], clean: true, use_legacy_build_api: true
  #
  #   #upload to crashlytics
  #   crashlytics({groups: 'internal-tests, internal-testers'})
  #
  #   #prepare git hash
  #   git_hash = `git rev-parse --short HEAD`
  #
  #   #send slack message
  #   slack(
  #     message: "New Local Shoutit version available (#{build_no}).",
  #     attachment_properties: {
  #       fields: [{
  #         title: 'git-hash',
  #         value: git_hash,
  #         short: true
  #       }, {
  #         title: 'storage',
  #         short: true
  #       }]
  #     }
  #   )
  #
  # end
  #
  # lane :staging do
  #
  #   au_add_identity
  #
  #   `export SSL_CERT_FILE=/etc/openssl/ca-cert.pem`
  #
  #   ENV["SIGH_TEAM_ID"]="E6WRHQXQE9"
  #
  #   #download provisioning profile
  #   sigh
  #
  #   # setup provisioning profile
  #   ENV["PROFILE_UDID"] = Actions.lane_context[Actions::SharedValues::SIGH_UDID]
  #
  #   # increase build number
  #   build_no = `git rev-list --count HEAD`
  #   increment_build_number build_number: build_no
  #   build_no = build_no.to_s.delete!("\n")
  #
  #   #build app
  #   gym scheme: ENV["XCODE_SCHEME_STAGING"], clean: true, use_legacy_build_api: true
  #
  #   extension_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier) + ENV["KIT_SUFFIX"]
  #
  #   #upload to crashlytics
  #   crashlytics({groups: 'internal-tests, internal-testers'})
  #
  #   #prepare git hash
  #   git_hash = `git rev-parse --short HEAD`
  #
  #   #send slack message
  #   slack(
  #     message: "New Shoutit version available (#{build_no}).",
  #     attachment_properties: {
  #       fields: [{
  #         title: 'git-hash',
  #         value: git_hash,
  #         short: true
  #       }, {
  #         title: 'storage',
  #         short: true
  #       }]
  #     }
  #   )
  #
  # end
  #
  # desc "Runs all the tests"
  # lane :testflight do
  #
  #   au_provision_download
  #
  #   au_add_identity gs_certificate_path: ENV["GS_TF_CERTIFICATE_PATH"], certificate_password: ENV["CERTIFICATE_PASSWORD"]
  #
  #   au_artifacts_download
  #
  #   sh "ls -a"
  #   sh "ls -d `pwd`/../*"
  #   sh "sigh resign ../shoutit-iphone.ipa --signing_identity \"iPhone Distribution: Syrex FZ-LLC (2857HUGC3W)\" --provisioning_profile ../distribution.mobileprovision"
  #
  #   ENV["FASTLANE_PASSWORD"] = ENV["TESTFLIGHT_DELIVER_PASSWORD"]
  #   ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"
  #
  #   pilot(skip_submission: true, skip_waiting_for_build_processing: true, wait_processing_interval: 1, app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier))
  #
  #   git_hash = `git rev-parse --short HEAD`
  #
  #   slack(
  #     message: "New version of Shoutit available on TestFlight",
  #     attachment_properties: {
  #       fields: [{
  #         title: 'git-hash',
  #         value: git_hash,
  #         short: true
  #       }]
  #     }
  #   )
  #
  # end

  
  desc "Runs all the tests"
  lane :localizations do
    au_generate_translations languages: "en ar de", export_dir: "translations/", project_file_path: "shoutit.xcodeproj"
  end

end