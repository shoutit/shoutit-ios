// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import QuartzCore;
@import Foundation;
@import ObjectiveC;
@import CoreFoundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class CAShapeLayer;
@class UIImage;
enum Gravity : NSInteger;
@class UIColor;
@class NSCoder;

SWIFT_CLASS("_TtC8Material4View")
@interface View : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the view. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end

enum ContentViewAlignment : NSInteger;
enum EdgeInsetsPreset : NSInteger;
enum InterimSpacePreset : NSInteger;

SWIFT_CLASS("_TtC8Material3Bar")
@interface Bar : View
/// Will layout the view.
@property (nonatomic, readonly) BOOL willLayout;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Should center the contentView.
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// A wrapper around grid.interimSpace.
@property (nonatomic) CGFloat interimSpace;
/// Grid cell factor.
@property (nonatomic) CGFloat gridFactor;
/// ContentView that holds the any desired subviews.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Left side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/// Right side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
/// Center UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull centerViews;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer.
- (nonnull instancetype)init;
/// A convenience initializer with parameter settings.
/// \param leftViews An Array of UIViews that go on the left side.
///
/// \param rightViews An Array of UIViews that go on the right side.
///
/// \param centerViews An Array of UIViews that go in the center.
///
- (nonnull instancetype)initWithLeftViews:(NSArray<UIView *> * _Nullable)leftViews rightViews:(NSArray<UIView *> * _Nullable)rightViews centerViews:(NSArray<UIView *> * _Nullable)centerViews;
- (void)layoutSubviews;
- (void)prepare;
@end


@interface Bar (SWIFT_EXTENSION(Material))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BorderWidthPreset, "BorderWidthPreset") {
  BorderWidthPresetNone = 0,
  BorderWidthPresetBorder1 = 1,
  BorderWidthPresetBorder2 = 2,
  BorderWidthPresetBorder3 = 3,
  BorderWidthPresetBorder4 = 4,
  BorderWidthPresetBorder5 = 5,
  BorderWidthPresetBorder6 = 6,
  BorderWidthPresetBorder7 = 7,
  BorderWidthPresetBorder8 = 8,
  BorderWidthPresetBorder9 = 9,
};

@class NSBundle;
@class UIViewController;

SWIFT_CLASS("_TtC8Material26BottomNavigationController")
@interface BottomNavigationController : UITabBarController
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer that accepts no parameters.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object an Array of UIViewControllers.
/// \param viewControllers An Array of UIViewControllers.
///
- (nonnull instancetype)initWithViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
/// To execute in the order of the layout chain, override this
/// method. <code>layoutSubviews</code> should be called immediately, unless you
/// have a certain need.
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


@interface BottomNavigationController (SWIFT_EXTENSION(Material))
@end

enum PulseAnimation : NSInteger;
@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC8Material6Button")
@interface Button : UIButton
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// A preset property for updated contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// Sets the normal and highlighted image for the button.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Sets the normal and highlighted title for the button.
@property (nonatomic, copy) NSString * _Nullable title;
/// Sets the normal and highlighted titleColor for the button.
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
/// A convenience initializer that acceps an image and tint
/// \param image A UIImage.
///
/// \param tintColor A UI
///
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image tintColor:(UIColor * _Nonnull)tintColor;
/// A convenience initializer that acceps a title and title
/// \param title A String.
///
/// \param titleColor A UI
///
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title titleColor:(UIColor * _Nonnull)titleColor;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)bringImageViewToFront;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


@interface Button (SWIFT_EXTENSION(Material))
@end


@interface Button (SWIFT_EXTENSION(Material))
@end


@interface CABasicAnimation (SWIFT_EXTENSION(Material))
@end


@interface CALayer (SWIFT_EXTENSION(Material)) <CAAnimationDelegate>
@end


@interface CALayer (SWIFT_EXTENSION(Material))
@end


@interface CALayer (SWIFT_EXTENSION(Material))
/// Manages the layout for the shape of the view instance.
- (void)layoutShape;
/// Sets the shadow path.
- (void)layoutShadowPath;
@end


@interface CALayer (SWIFT_EXTENSION(Material))
@end

@class CAAnimation;

@interface CALayer (SWIFT_EXTENSION(Material))
/// A function that accepts CAAnimation objects and executes them on the
/// view’s backing layer.
/// \param animation A CAAnimation instance.
///
- (void)animate:(NSArray<CAAnimation *> * _Nonnull)animations;
/// Executed when an animation has started.
/// <ul>
///   <li>
///     _ anim: A CAAnimation.
///   </li>
/// </ul>
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;
/// A delegation function that is executed when the backing layer stops
/// running an animation.
/// \param animation The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
///
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end

enum HeightPreset : NSInteger;
enum ShapePreset : NSInteger;
enum DepthPreset : NSInteger;
enum CornerRadiusPreset : NSInteger;

@interface CALayer (SWIFT_EXTENSION(Material))
/// A property that accesses the frame.origin.x property.
@property (nonatomic) CGFloat x;
/// A property that accesses the frame.origin.y property.
@property (nonatomic) CGFloat y;
/// A property that accesses the frame.size.width property.
@property (nonatomic) CGFloat width;
/// A property that accesses the frame.size.height property.
@property (nonatomic) CGFloat height;
/// HeightPreset value.
@property (nonatomic) enum HeightPreset heightPreset;
/// A property that manages the overall shape for the object. If either the
/// width or height property is set, the other will be automatically adjusted
/// to maintain the shape of the object.
@property (nonatomic) enum ShapePreset shapePreset;
/// A preset value for Depth.
@property (nonatomic) enum DepthPreset depthPreset;
/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL isShadowPathAutoSizing;
/// A property that sets the cornerRadius of the backing layer.
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
/// A preset property to set the borderWidth.
@property (nonatomic) enum BorderWidthPreset borderWidthPreset;
@end


@interface CAMediaTimingFunction (SWIFT_EXTENSION(Material))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull linear;)
+ (CAMediaTimingFunction * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeIn;)
+ (CAMediaTimingFunction * _Nonnull)easeIn SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOut;)
+ (CAMediaTimingFunction * _Nonnull)easeOut SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeInOut;)
+ (CAMediaTimingFunction * _Nonnull)easeInOut SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull standard;)
+ (CAMediaTimingFunction * _Nonnull)standard SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull deceleration;)
+ (CAMediaTimingFunction * _Nonnull)deceleration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull acceleration;)
+ (CAMediaTimingFunction * _Nonnull)acceleration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull sharp;)
+ (CAMediaTimingFunction * _Nonnull)sharp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CAMediaTimingFunction * _Nonnull easeOutBack;)
+ (CAMediaTimingFunction * _Nonnull)easeOutBack SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Material9PulseView")
@interface PulseView : View
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class Toolbar;

SWIFT_CLASS("_TtC8Material4Card")
@interface Card : PulseView
/// A container view for subviews.
@property (nonatomic, readonly, strong) UIView * _Nonnull container;
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) enum ShapePreset shapePreset;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// A reference to the toolbar.
@property (nonatomic, strong) Toolbar * _Nullable toolbar;
/// A preset wrapper around toolbarEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset toolbarEdgeInsetsPreset;
/// A reference to toolbarEdgeInsets.
@property (nonatomic) UIEdgeInsets toolbarEdgeInsets;
/// A reference to the contentView.
@property (nonatomic, strong) UIView * _Nullable contentView;
/// A preset wrapper around contentViewEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentViewEdgeInsetsPreset;
/// A reference to contentViewEdgeInsets.
@property (nonatomic) UIEdgeInsets contentViewEdgeInsets;
/// A reference to the bottomBar.
@property (nonatomic, strong) Bar * _Nullable bottomBar;
/// A preset wrapper around bottomBarEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset bottomBarEdgeInsetsPreset;
/// A reference to bottomBarEdgeInsets.
@property (nonatomic) UIEdgeInsets bottomBarEdgeInsets;
/// An initializer that accepts a NSCoder.
/// \param coder aDecoder A NSCoder.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that accepts a CGRect.
/// \param frame A CGRect.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
/// A convenience initiazlier.
/// \param toolbar An optional Toolbar.
///
/// \param contentView An optional UIView.
///
/// \param bottomBar An optional Bar.
///
- (nullable instancetype)initWithToolbar:(Toolbar * _Nullable)toolbar contentView:(UIView * _Nullable)contentView bottomBar:(Bar * _Nullable)bottomBar;
- (void)layoutSubviews;
/// Reloads the layout.
- (void)reload;
- (void)prepare;
/// Prepare the view size from a given top position.
/// \param view A UIView.
///
/// \param edge insets An EdgeInsets.
///
/// \param from top A CGFloat.
///
///
/// returns:
/// A CGFloat.
- (CGFloat)prepareWithView:(UIView * _Nonnull)view with:(UIEdgeInsets)insets from:(CGFloat)top;
@end


@interface Card (SWIFT_EXTENSION(Material))
@end


SWIFT_CLASS_NAMED("CollectionViewCell")
@interface CollectionViewCell : UICollectionViewCell
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the view. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS("_TtC8Material22CardCollectionViewCell")
@interface CardCollectionViewCell : CollectionViewCell
/// An optional reference to the card being displayed in the cell.
@property (nonatomic, strong) Card * _Nullable card;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class CollectionView;

SWIFT_CLASS("_TtC8Material28CardCollectionViewController")
@interface CardCollectionViewController : UIViewController
/// A reference to a Reminder.
@property (nonatomic, readonly, strong) CollectionView * _Nonnull collectionView;
/// An index of IndexPath to DataSourceItem.
@property (nonatomic, copy) NSDictionary<NSIndexPath *, id> * _Nonnull dataSourceItemsIndexPaths;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepareView method
/// to initialize property values and other setup operations.
/// The super.prepareView method should always be called immediately
/// when subclassing.
- (void)prepare;
/// Calls the layout functions for the view heirarchy.
- (void)layoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface CardCollectionViewController (SWIFT_EXTENSION(Material))
@end


@interface CardCollectionViewController (SWIFT_EXTENSION(Material))
@end


@interface CardCollectionViewController (SWIFT_EXTENSION(Material))
@end

@class UICollectionView;

@interface CardCollectionViewController (SWIFT_EXTENSION(Material))
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

enum ChipBarStyle : NSInteger;
@class UIScrollView;
@protocol ChipBarDelegate;
@class ChipItem;

SWIFT_CLASS("_TtC8Material7ChipBar")
@interface ChipBar : Bar
/// An enum that determines the chip bar style.
@property (nonatomic) enum ChipBarStyle chipBarStyle;
/// A reference to the scroll view when the chip bar style is scrollable.
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull scrollView;
/// Enables and disables bouncing when swiping.
@property (nonatomic) BOOL isScrollBounceEnabled;
/// A delegation reference.
@property (nonatomic, weak) id <ChipBarDelegate> _Nullable delegate;
/// The currently selected chipItem.
@property (nonatomic, readonly, strong) ChipItem * _Nullable selectedChipItem;
/// A preset wrapper around chipItems contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset chipItemsContentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets chipItemsContentEdgeInsets;
/// A preset wrapper around chipItems interimSpace.
@property (nonatomic) enum InterimSpacePreset chipItemsInterimSpacePreset;
/// A wrapper around chipItems interimSpace.
@property (nonatomic) CGFloat chipItemsInterimSpace;
/// Buttons.
@property (nonatomic, copy) NSArray<ChipItem *> * _Nonnull chipItems;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface ChipBar (SWIFT_EXTENSION(Material))
@end


@interface ChipBar (SWIFT_EXTENSION(Material))
@end


@interface ChipBar (SWIFT_EXTENSION(Material))
@end


@interface ChipBar (SWIFT_EXTENSION(Material))
@end


@interface ChipBar (SWIFT_EXTENSION(Material))
/// Selects a given index from the chipItems array.
/// <ul>
///   <li>
///     Paramater completion: An optional completion block.
///   </li>
/// </ul>
/// \param at index An Int.
///
- (void)selectAt:(NSInteger)index completion:(void (^ _Nullable)(ChipItem * _Nonnull))completion;
/// Animates to a given chipItem.
/// \param to chipItem A ChipItem.
///
/// \param completion An optional completion block.
///
- (void)animateTo:(ChipItem * _Nonnull)chipItem completion:(void (^ _Nullable)(ChipItem * _Nonnull))completion;
@end


@interface ChipBar (SWIFT_EXTENSION(Material))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ChipBarAlignment, "ChipBarAlignment") {
  ChipBarAlignmentTop = 0,
  ChipBarAlignmentBottom = 1,
  ChipBarAlignmentHidden = 2,
};


SWIFT_CLASS("_TtC8Material20TransitionController")
@interface TransitionController : UIViewController
/// A Boolean property used to enable and disable interactivity
/// with the rootViewController.
@property (nonatomic) BOOL isUserInteractionEnabled;
/// A reference to the container view.
@property (nonatomic, readonly, strong) UIView * _Nonnull container;
/// A UIViewController property that references the active
/// main UIViewController. To swap the rootViewController, it
/// is recommended to use the transitionFromRootViewController
/// helper method.
@property (nonatomic, readonly, strong) UIViewController * _Null_unspecified rootViewController;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer for the BarController.
/// \param rootViewController The main UIViewController.
///
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
/// A method to swap rootViewController objects.
/// \param toViewController The UIViewController to swap
/// with the active rootViewController.
///
/// \param completion A completion block that is execited after
/// the transition animation from the active rootViewController
/// to the toViewController has completed.
///
- (void)transitionTo:(UIViewController * _Nonnull)viewController completion:(void (^ _Nullable)(BOOL))completion;
/// To execute in the order of the layout chain, override this
/// method. <code>layoutSubviews</code> should be called immediately, unless you
/// have a certain need.
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end

enum DisplayStyle : NSInteger;

SWIFT_CLASS("_TtC8Material17ChipBarController")
@interface ChipBarController : TransitionController
/// A Display value to indicate whether or not to
/// display the rootViewController to the full view
/// bounds, or up to the toolbar height.
@property (nonatomic) enum DisplayStyle displayStyle;
/// The ChipBar used to switch between view controllers.
@property (nonatomic, readonly, strong) ChipBar * _Nonnull chipBar;
/// The chipBar alignment.
@property (nonatomic) enum ChipBarAlignment chipBarAlignment;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


@interface ChipBarController (SWIFT_EXTENSION(Material))
@end


@interface ChipBarController (SWIFT_EXTENSION(Material))
@end


SWIFT_PROTOCOL_NAMED("ChipBarDelegate")
@protocol ChipBarDelegate
@optional
/// A delegation method that is executed when the chipItem will trigger the
/// animation to the next chip.
/// \param chipBar A ChipBar.
///
/// \param chipItem A ChipItem.
///
- (void)chipBarWithChipBar:(ChipBar * _Nonnull)chipBar willSelect:(ChipItem * _Nonnull)chipItem;
/// A delegation method that is executed when the chipItem did complete the
/// animation to the next chip.
/// \param chipBar A ChipBar.
///
/// \param chipItem A ChipItem.
///
- (void)chipBarWithChipBar:(ChipBar * _Nonnull)chipBar didSelect:(ChipItem * _Nonnull)chipItem;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ChipBarStyle, "ChipBarStyle") {
  ChipBarStyleAuto = 0,
  ChipBarStyleNonScrollable = 1,
  ChipBarStyleScrollable = 2,
};


SWIFT_CLASS("_TtC8Material10FlatButton")
@interface FlatButton : Button
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material8ChipItem")
@interface ChipItem : FlatButton
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface ChipItem (SWIFT_EXTENSION(Material))
@end


@interface ChipItem (SWIFT_EXTENSION(Material))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ChipItemStyle, "ChipItemStyle") {
  ChipItemStylePill = 0,
};


SWIFT_CLASS_NAMED("CollectionReusableView")
@interface CollectionReusableView : UICollectionReusableView
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the view. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// A wrapper around grid.interimSpace.
@property (nonatomic) CGFloat interimSpace;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


@interface CollectionReusableView (SWIFT_EXTENSION(Material))
@end


@interface CollectionReusableView (SWIFT_EXTENSION(Material))
@end

@class UICollectionViewLayout;

SWIFT_CLASS("_TtC8Material14CollectionView")
@interface CollectionView : UICollectionView
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// Scroll direction.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// Spacing between items.
@property (nonatomic) CGFloat interimSpace;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param frame A CGRect defining the view’s frame.
///
/// \param collectionViewLayout A UICollectionViewLayout reference.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param collectionViewLayout A UICollectionViewLayout reference.
///
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param frame A CGRect defining the view’s frame.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer that initializes the object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end



@interface CollectionViewCell (SWIFT_EXTENSION(Material))
@end


@interface CollectionViewCell (SWIFT_EXTENSION(Material))
@end


SWIFT_CLASS("_TtC8Material24CollectionViewController")
@interface CollectionViewController : UIViewController
/// A reference to a Reminder.
@property (nonatomic, readonly, strong) CollectionView * _Nonnull collectionView;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepareView method
/// to initialize property values and other setup operations.
/// The super.prepareView method should always be called immediately
/// when subclassing.
- (void)prepare;
/// Calls the layout functions for the view heirarchy.
- (void)layoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface CollectionViewController (SWIFT_EXTENSION(Material))
@end


@interface CollectionViewController (SWIFT_EXTENSION(Material))
@end


@interface CollectionViewController (SWIFT_EXTENSION(Material))
@end


@interface CollectionViewController (SWIFT_EXTENSION(Material))
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Material20CollectionViewLayout")
@interface CollectionViewLayout : UICollectionViewLayout
/// Used to calculate the dimensions of the cells.
@property (nonatomic) CGPoint offset;
/// The size of items.
@property (nonatomic) CGSize itemSize;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A wrapper around grid.contentEdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// Size of the content.
@property (nonatomic, readonly) CGSize contentSize;
/// Scroll direction.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// Spacing between items.
@property (nonatomic) CGFloat interimSpace;
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSIndexPath;

@interface CollectionViewLayout (SWIFT_EXTENSION(Material))
/// Retrieves the index paths for the items within the passed in CGRect.
/// \param rect A CGRect that acts as the bounds to find the items within.
///
///
/// returns:
/// An Array of NSIndexPath objects.
- (NSArray<NSIndexPath *> * _Nonnull)indexPathsOfItemsIn:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
@end


@interface CollectionViewLayout (SWIFT_EXTENSION(Material))
@end

@class UICollectionViewLayoutAttributes;

@interface CollectionViewLayout (SWIFT_EXTENSION(Material))
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (void)prepareLayout;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset SWIFT_WARN_UNUSED_RESULT;
@end

@class CIColor;

SWIFT_CLASS("_TtC8Material5Color")
@interface Color : UIColor
- (nonnull instancetype)initWithWhite:(CGFloat)white alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDisplayP3Red:(CGFloat)displayP3Red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nonnull instancetype)initWithCGColor:(CGColorRef _Nonnull)cgColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPatternImage:(UIImage * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCIColor:(CIColor * _Nonnull)ciColor OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("ColorPalette")
@protocol ColorPalette
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten5;)
+ (UIColor * _Nonnull)lighten5 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten4;)
+ (UIColor * _Nonnull)lighten4 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten3;)
+ (UIColor * _Nonnull)lighten3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten2;)
+ (UIColor * _Nonnull)lighten2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull lighten1;)
+ (UIColor * _Nonnull)lighten1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull base;)
+ (UIColor * _Nonnull)base SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken1;)
+ (UIColor * _Nonnull)darken1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken2;)
+ (UIColor * _Nonnull)darken2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken3;)
+ (UIColor * _Nonnull)darken3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull darken4;)
+ (UIColor * _Nonnull)darken4 SWIFT_WARN_UNUSED_RESULT;
@optional
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent1;)
+ (UIColor * _Nonnull)accent1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent2;)
+ (UIColor * _Nonnull)accent2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent3;)
+ (UIColor * _Nonnull)accent3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull accent4;)
+ (UIColor * _Nonnull)accent4 SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ContentViewAlignment, "ContentViewAlignment") {
  ContentViewAlignmentFull = 0,
  ContentViewAlignmentCenter = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, CornerRadiusPreset, "CornerRadiusPreset") {
  CornerRadiusPresetNone = 0,
  CornerRadiusPresetCornerRadius1 = 1,
  CornerRadiusPresetCornerRadius2 = 2,
  CornerRadiusPresetCornerRadius3 = 3,
  CornerRadiusPresetCornerRadius4 = 4,
  CornerRadiusPresetCornerRadius5 = 5,
  CornerRadiusPresetCornerRadius6 = 6,
  CornerRadiusPresetCornerRadius7 = 7,
  CornerRadiusPresetCornerRadius8 = 8,
  CornerRadiusPresetCornerRadius9 = 9,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DepthPreset, "DepthPreset") {
  DepthPresetNone = 0,
  DepthPresetDepth1 = 1,
  DepthPresetDepth2 = 2,
  DepthPresetDepth3 = 3,
  DepthPresetDepth4 = 4,
  DepthPresetDepth5 = 5,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DeviceModel, "DeviceModel") {
  DeviceModelIPodTouch5 = 0,
  DeviceModelIPodTouch6 = 1,
  DeviceModelIPhone4 = 2,
  DeviceModelIPhone4s = 3,
  DeviceModelIPhone5 = 4,
  DeviceModelIPhone5c = 5,
  DeviceModelIPhone5s = 6,
  DeviceModelIPhone6 = 7,
  DeviceModelIPhone6Plus = 8,
  DeviceModelIPhone6s = 9,
  DeviceModelIPhone6sPlus = 10,
  DeviceModelIPhone7 = 11,
  DeviceModelIPhone7Plus = 12,
  DeviceModelIPhoneSE = 13,
  DeviceModelIPad2 = 14,
  DeviceModelIPad3 = 15,
  DeviceModelIPad4 = 16,
  DeviceModelIPadAir = 17,
  DeviceModelIPadAir2 = 18,
  DeviceModelIPadMini = 19,
  DeviceModelIPadMini2 = 20,
  DeviceModelIPadMini3 = 21,
  DeviceModelIPadMini4 = 22,
  DeviceModelIPadProSmall = 23,
  DeviceModelIPadProLarge = 24,
  DeviceModelAppleTV = 25,
  DeviceModelSimulator = 26,
  DeviceModelUnknown = 27,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DisplayStyle, "DisplayStyle") {
  DisplayStylePartial = 0,
  DisplayStyleFull = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DividerAlignment, "DividerAlignment") {
  DividerAlignmentTop = 0,
  DividerAlignmentLeft = 1,
  DividerAlignmentBottom = 2,
  DividerAlignmentRight = 3,
};

@protocol DynamicFontTypeDelegate;

SWIFT_CLASS_NAMED("DynamicFontType")
@interface DynamicFontType : NSObject
/// A weak reference to a DynamicFontTypeDelegate.
@property (nonatomic, weak) id <DynamicFontTypeDelegate> _Nullable delegate;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("DynamicFontTypeDelegate")
@protocol DynamicFontTypeDelegate
/// A delegation method that is executed when the dynamic type
/// is changed.
/// \param dynamicFontType A DynamicFontType.
///
- (void)dynamicFontTypeWithDynamicFontType:(DynamicFontType * _Nonnull)dynamicFontType;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, EdgeInsetsPreset, "EdgeInsetsPreset") {
  EdgeInsetsPresetNone = 0,
  EdgeInsetsPresetSquare1 = 1,
  EdgeInsetsPresetSquare2 = 2,
  EdgeInsetsPresetSquare3 = 3,
  EdgeInsetsPresetSquare4 = 4,
  EdgeInsetsPresetSquare5 = 5,
  EdgeInsetsPresetSquare6 = 6,
  EdgeInsetsPresetSquare7 = 7,
  EdgeInsetsPresetSquare8 = 8,
  EdgeInsetsPresetSquare9 = 9,
  EdgeInsetsPresetWideRectangle1 = 10,
  EdgeInsetsPresetWideRectangle2 = 11,
  EdgeInsetsPresetWideRectangle3 = 12,
  EdgeInsetsPresetWideRectangle4 = 13,
  EdgeInsetsPresetWideRectangle5 = 14,
  EdgeInsetsPresetWideRectangle6 = 15,
  EdgeInsetsPresetWideRectangle7 = 16,
  EdgeInsetsPresetWideRectangle8 = 17,
  EdgeInsetsPresetWideRectangle9 = 18,
  EdgeInsetsPresetTallRectangle1 = 19,
  EdgeInsetsPresetTallRectangle2 = 20,
  EdgeInsetsPresetTallRectangle3 = 21,
  EdgeInsetsPresetTallRectangle4 = 22,
  EdgeInsetsPresetTallRectangle5 = 23,
  EdgeInsetsPresetTallRectangle6 = 24,
  EdgeInsetsPresetTallRectangle7 = 25,
  EdgeInsetsPresetTallRectangle8 = 26,
  EdgeInsetsPresetTallRectangle9 = 27,
/// horizontally
  EdgeInsetsPresetHorizontally1 = 28,
  EdgeInsetsPresetHorizontally2 = 29,
  EdgeInsetsPresetHorizontally3 = 30,
  EdgeInsetsPresetHorizontally4 = 31,
  EdgeInsetsPresetHorizontally5 = 32,
/// vertically
  EdgeInsetsPresetVertically1 = 33,
  EdgeInsetsPresetVertically2 = 34,
  EdgeInsetsPresetVertically3 = 35,
  EdgeInsetsPresetVertically4 = 36,
  EdgeInsetsPresetVertically5 = 37,
};

enum TextFieldPlaceholderAnimation : NSInteger;
@class UIFont;
@class UILabel;
@class IconButton;

SWIFT_CLASS("_TtC8Material9TextField")
@interface TextField : UITextField
/// Default size when using AutoLayout.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// A Boolean that indicates if the placeholder label is animated.
@property (nonatomic) BOOL isPlaceholderAnimated;
/// Set the placeholder animation value.
@property (nonatomic) enum TextFieldPlaceholderAnimation placeholderAnimation;
/// A boolean indicating whether the text is empty.
@property (nonatomic, readonly) BOOL isEmpty;
@property (nonatomic, strong) UIView * _Nullable leftView;
/// The leftView width value.
@property (nonatomic, readonly) CGFloat leftViewWidth;
/// The leftView offset value.
@property (nonatomic) CGFloat leftViewOffset;
/// Placeholder normal text
@property (nonatomic, strong) UIColor * _Nonnull leftViewNormalColor;
/// Placeholder active text
@property (nonatomic, strong) UIColor * _Nonnull leftViewActiveColor;
/// Divider normal height.
@property (nonatomic) CGFloat dividerNormalHeight;
/// Divider active height.
@property (nonatomic) CGFloat dividerActiveHeight;
/// Divider normal color.
@property (nonatomic, strong) UIColor * _Nonnull dividerNormalColor;
/// Divider active color.
@property (nonatomic, strong) UIColor * _Nonnull dividerActiveColor;
/// The placeholderLabel font value.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The placeholderLabel text value.
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// The placeholder UILabel.
@property (nonatomic, readonly, strong) UILabel * _Nonnull placeholderLabel;
/// Placeholder normal text
@property (nonatomic, strong) UIColor * _Nonnull placeholderNormalColor;
/// Placeholder active text
@property (nonatomic, strong) UIColor * _Nonnull placeholderActiveColor;
/// This property adds a padding to placeholder y position animation
@property (nonatomic) CGFloat placeholderVerticalOffset;
/// The detailLabel UILabel that is displayed.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// The detailLabel text value.
@property (nonatomic, copy) NSString * _Nullable detail;
/// Detail text
@property (nonatomic, strong) UIColor * _Nonnull detailColor;
/// Vertical distance for the detailLabel from the divider.
@property (nonatomic) CGFloat detailVerticalOffset;
/// Handles the textAlignment of the placeholderLabel.
@property (nonatomic) NSTextAlignment textAlignment;
/// A reference to the clearIconButton.
@property (nonatomic, readonly, strong) IconButton * _Nullable clearIconButton;
/// Enables the clearIconButton.
@property (nonatomic) BOOL isClearIconButtonEnabled;
/// Enables the automatic handling of the clearIconButton.
@property (nonatomic) BOOL isClearIconButtonAutoHandled;
/// A reference to the visibilityIconButton.
@property (nonatomic, readonly, strong) IconButton * _Nullable visibilityIconButton;
/// Enables the visibilityIconButton.
@property (nonatomic) BOOL isVisibilityIconButtonEnabled;
/// Enables the automatic handling of the visibilityIconButton.
@property (nonatomic) BOOL isVisibilityIconButtonAutoHandled;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// EdgeInsets for text.
@property (nonatomic) CGFloat textInset;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS("_TtC8Material14ErrorTextField")
@interface ErrorTextField : TextField
/// Controls the visibility of detailLabel
@property (nonatomic) BOOL isErrorRevealed;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material9FABButton")
@interface FABButton : Button
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

enum FABMenuDirection : NSInteger;
@protocol FABMenuDelegate;
@class FABMenuItem;

SWIFT_CLASS_NAMED("FABMenu")
@interface FABMenu : View
@property (nonatomic) enum FABMenuDirection fabMenuDirection;
/// A reference to the base FABButton.
@property (nonatomic, strong) FABButton * _Nullable fabButton;
/// Size of FABMenuItems.
@property (nonatomic) CGSize fabMenuItemSize;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// The space between views.
@property (nonatomic) CGFloat interimSpace;
/// A boolean indicating if the menu is open or not.
@property (nonatomic) BOOL isOpened;
/// A boolean indicating if the menu is enabled.
@property (nonatomic) BOOL isEnabled;
/// An optional delegation handler.
@property (nonatomic, weak) id <FABMenuDelegate> _Nullable delegate;
/// A reference to the FABMenuItems
@property (nonatomic, copy) NSArray<FABMenuItem *> * _Nonnull fabMenuItems;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface FABMenu (SWIFT_EXTENSION(Material))
@end


@interface FABMenu (SWIFT_EXTENSION(Material))
/// Handles the hit test for the Menu and views outside of the Menu bounds.
/// <ul>
///   <li>
///     _ point: A CGPoint.
///   </li>
/// </ul>
/// \param with event An optional UIEvent.
///
///
/// returns:
/// An optional UIView.
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


@interface FABMenu (SWIFT_EXTENSION(Material))
/// Open the Menu component with animation options.
/// \param duration The time for each view’s animation.
///
/// \param delay A delay time for each view’s animation.
///
/// \param usingSpringWithDamping A damping ratio for the animation.
///
/// \param initialSpringVelocity The initial velocity for the animation.
///
/// \param options Options to pass to the animation.
///
/// \param animations An animation block to execute on each view’s animation.
///
/// \param completion A completion block to execute on each view’s animation.
///
- (void)openWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)usingSpringWithDamping initialSpringVelocity:(CGFloat)initialSpringVelocity options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(UIView * _Nonnull))animations completion:(void (^ _Nullable)(UIView * _Nonnull))completion;
/// Close the Menu component with animation options.
/// \param duration The time for each view’s animation.
///
/// \param delay A delay time for each view’s animation.
///
/// \param usingSpringWithDamping A damping ratio for the animation.
///
/// \param initialSpringVelocity The initial velocity for the animation.
///
/// \param options Options to pass to the animation.
///
/// \param animations An animation block to execute on each view’s animation.
///
/// \param completion A completion block to execute on each view’s animation.
///
- (void)closeWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)usingSpringWithDamping initialSpringVelocity:(CGFloat)initialSpringVelocity options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(UIView * _Nonnull))animations completion:(void (^ _Nullable)(UIView * _Nonnull))completion;
@end


SWIFT_CLASS("_TtC8Material17FABMenuController")
@interface FABMenuController : TransitionController
/// Reference to the MenuView.
@property (nonatomic, readonly, strong) FABMenu * _Nonnull fabMenu;
/// The fabMenuBacking UIBlurEffectStyle.
@property (nonatomic) UIBlurEffectStyle fabMenuBackingBlurEffectStyle;
/// A reference to the blurView.
@property (nonatomic, readonly, strong) UIView * _Nullable blurView;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("FABMenuDelegate")
@protocol FABMenuDelegate
@optional
/// A delegation method that is execited when the fabMenu will open.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuWillOpenWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is execited when the fabMenu did open.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuDidOpenWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is execited when the fabMenu will close.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuWillCloseWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is execited when the fabMenu did close.
/// \param fabMenu A FABMenu.
///
- (void)fabMenuDidCloseWithFabMenu:(FABMenu * _Nonnull)fabMenu;
/// A delegation method that is executed when the user taps while
/// the menu is opened.
/// \param fabMenu A FABMenu.
///
/// \param tappedAt point A CGPoint.
///
/// \param isOutside A boolean indicating whether the tap
/// was outside the menu button area.
///
- (void)fabMenuWithFabMenu:(FABMenu * _Nonnull)fabMenu tappedAt:(CGPoint)point isOutside:(BOOL)isOutside;
@end


@interface FABMenuController (SWIFT_EXTENSION(Material)) <FABMenuDelegate>
@end


@interface FABMenuController (SWIFT_EXTENSION(Material))
@end


@interface FABMenuController (SWIFT_EXTENSION(Material))
@end


@interface FABMenuController (SWIFT_EXTENSION(Material))
@end


typedef SWIFT_ENUM_NAMED(NSInteger, FABMenuDirection, "FABMenuDirection") {
  FABMenuDirectionUp = 0,
  FABMenuDirectionDown = 1,
  FABMenuDirectionLeft = 2,
  FABMenuDirectionRight = 3,
};


SWIFT_CLASS("_TtC8Material11FABMenuItem")
@interface FABMenuItem : View
/// A reference to the titleLabel.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// A reference to the fabButton.
@property (nonatomic, readonly, strong) FABButton * _Nonnull fabButton;
- (void)prepare;
/// A reference to the titleLabel text.
@property (nonatomic, copy) NSString * _Nullable title;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface FABMenuItem (SWIFT_EXTENSION(Material))
/// Shows the titleLabel.
- (void)showTitleLabel;
/// Hides the titleLabel.
- (void)hideTitleLabel;
@end


@interface FABMenuItem (SWIFT_EXTENSION(Material))
@end


typedef SWIFT_ENUM_NAMED(NSInteger, Gravity, "Gravity") {
  GravityCenter = 0,
  GravityTop = 1,
  GravityBottom = 2,
  GravityLeft = 3,
  GravityRight = 4,
  GravityTopLeft = 5,
  GravityTopRight = 6,
  GravityBottomLeft = 7,
  GravityBottomRight = 8,
  GravityResize = 9,
  GravityResizeAspect = 10,
  GravityResizeAspectFill = 11,
};

typedef SWIFT_ENUM_NAMED(NSInteger, GridAxisDirection, "GridAxisDirection") {
  GridAxisDirectionAny = 0,
  GridAxisDirectionHorizontal = 1,
  GridAxisDirectionVertical = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, HeightPreset, "HeightPreset") {
  HeightPresetNone = 0,
  HeightPresetTiny = 20,
  HeightPresetXsmall = 28,
  HeightPresetSmall = 36,
  HeightPresetDefault = 44,
  HeightPresetNormal = 49,
  HeightPresetMedium = 52,
  HeightPresetLarge = 60,
  HeightPresetXlarge = 68,
  HeightPresetXxlarge = 104,
};


SWIFT_CLASS("_TtC8Material10IconButton")
@interface IconButton : Button
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;
enum ToolbarAlignment : NSInteger;

SWIFT_CLASS("_TtC8Material9ImageCard")
@interface ImageCard : Card
/// A Display value to indicate whether or not to
/// display the imageView to the full view
/// bounds.
@property (nonatomic) enum DisplayStyle displayStyle;
/// A preset wrapper around imageViewEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset imageViewEdgeInsetsPreset;
/// A reference to imageViewEdgeInsets.
@property (nonatomic) UIEdgeInsets imageViewEdgeInsets;
/// A reference to the imageView.
@property (nonatomic, strong) UIImageView * _Nullable imageView;
/// An ImageCardToolbarAlignment value.
@property (nonatomic) enum ToolbarAlignment toolbarAlignment;
/// Reloads the view.
- (void)reload;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ImageFormat, "ImageFormat") {
  ImageFormatPng = 0,
  ImageFormatJpeg = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, InterimSpacePreset, "InterimSpacePreset") {
  InterimSpacePresetNone = 0,
  InterimSpacePresetInterimSpace1 = 1,
  InterimSpacePresetInterimSpace2 = 2,
  InterimSpacePresetInterimSpace3 = 3,
  InterimSpacePresetInterimSpace4 = 4,
  InterimSpacePresetInterimSpace5 = 5,
  InterimSpacePresetInterimSpace6 = 6,
  InterimSpacePresetInterimSpace7 = 7,
  InterimSpacePresetInterimSpace8 = 8,
  InterimSpacePresetInterimSpace9 = 9,
  InterimSpacePresetInterimSpace10 = 10,
  InterimSpacePresetInterimSpace11 = 11,
  InterimSpacePresetInterimSpace12 = 12,
  InterimSpacePresetInterimSpace13 = 13,
  InterimSpacePresetInterimSpace14 = 14,
  InterimSpacePresetInterimSpace15 = 15,
  InterimSpacePresetInterimSpace16 = 16,
  InterimSpacePresetInterimSpace17 = 17,
  InterimSpacePresetInterimSpace18 = 18,
};


SWIFT_CLASS_NAMED("Layer")
@interface Layer : CAShapeLayer
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// A property that manages an image for the visualLayer’s contents
/// property. Images should not be set to the backing layer’s contents
/// property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Allows a relative subrectangle within the range of 0 to 1 to be
/// specified for the visualLayer’s contents property. This allows
/// much greater flexibility than the contentsGravity property in
/// terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;
/// A CGRect that defines a stretchable region inside the visualLayer
/// with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;
/// A floating point value that defines a ratio between the pixel
/// dimensions of the visualLayer’s contents property and the size
/// of the layer. By default, this value is set to the Screen.scale.
@property (nonatomic) CGFloat contentsScale;
/// A Preset for the contentsGravity property.
@property (nonatomic) enum Gravity contentsGravityPreset;
/// Determines how content should be aligned within the visualLayer’s bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;
/// A property that sets the cornerRadius of the backing layer. If the shape
/// property has a value of .circle when the cornerRadius is set, it will
/// become .none, as it no longer maintains its circle shape.
@property (nonatomic) CGFloat cornerRadius;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer the same as init(). The layer parameter is ignored
/// to avoid crashes on certain architectures.
/// \param layer Any.
///
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame;
- (void)layoutSublayers;
/// Prepares the visualLayer property.
- (void)prepareVisualLayer;
@end


SWIFT_CLASS("_TtC8Material16MotionController")
@interface MotionController : NSObject
/// A boolean indicating whether the transition interactive or not.
@property (nonatomic, readonly) BOOL isInteractive;
/// Progress of the current transition. 0 if no transition is happening.
@property (nonatomic, readonly) NSTimeInterval elapsedTime;
/// A boolean indicating whether a transition is active.
@property (nonatomic, readonly) BOOL isTransitioning;
/// A view container used to hold all the animating views during a
/// transition.
@property (nonatomic, readonly, strong) UIView * _Nullable container;
/// Max duration used by MotionAnimators and MotionPlugins.
@property (nonatomic, readonly) NSTimeInterval totalDuration;
/// Initializer.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// <h3>The singleton class/object for controlling interactive transitions.</h3>
/// \code
/// Motion.shared
///
/// \endcode<h4>Use the following methods for controlling the interactive transition:</h4>
/// \code
/// func update(progress:Double)
/// func end()
/// func cancel()
/// func apply(transitions: [MotionTransition], to view: UIView)
///
/// \endcode
SWIFT_CLASS("_TtC8Material6Motion")
@interface Motion : MotionController
/// Shared singleton object for controlling the transition
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Motion * _Nonnull shared;)
+ (Motion * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Source view controller.
@property (nonatomic, readonly, strong) UIViewController * _Nullable fromViewController;
/// Destination view controller.
@property (nonatomic, readonly, strong) UIViewController * _Nullable toViewController;
/// Whether or not we are presenting the destination view controller.
@property (nonatomic, readonly) BOOL isPresenting;
/// Progress of the current transition, 0 if a transition is not happening.
@property (nonatomic) NSTimeInterval elapsedTime;
/// Indicates whether the transition is animating or not.
@property (nonatomic) BOOL isAnimating;
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end

@class UINavigationController;
@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface Motion (SWIFT_EXTENSION(Material)) <UINavigationControllerDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animationController SWIFT_WARN_UNUSED_RESULT;
@end


@interface Motion (SWIFT_EXTENSION(Material))
/// Turn off built-in animations for the next transition.
- (void)disableDefaultAnimationForNextTransition;
/// Set the container background color for the next transition.
/// <ul>
///   <li>
///     _ color: An optional UIColor.
///   </li>
/// </ul>
- (void)setContainerBackgroundColorForNextTransition:(UIColor * _Nullable)color;
@end

@protocol UIViewControllerContextTransitioning;

@interface Motion (SWIFT_EXTENSION(Material)) <UIViewControllerAnimatedTransitioning>
/// The animation method that is used to coordinate the transition.
/// \param using transitionContext A UIViewControllerContextTransitioning.
///
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)context;
/// Returns the transition duration time interval.
/// \param using transitionContext An optional UIViewControllerContextTransitioning.
///
///
/// returns:
/// A TimeInterval that is the total animation time including delays.
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animationEnded:(BOOL)transitionCompleted;
@end


@interface Motion (SWIFT_EXTENSION(Material)) <UITabBarControllerDelegate>
- (BOOL)tabBarController:(UITabBarController * _Nonnull)tabBarController shouldSelectViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animationController SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material)) <UIViewControllerInteractiveTransitioning>
@property (nonatomic, readonly) BOOL wantsInteractiveStart;
- (void)startInteractiveTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
@end

@class CAAnimationGroup;

@interface Motion (SWIFT_EXTENSION(Material))
/// Executes a block of code after a time delay.
/// \param duration An animation duration time.
///
/// \param animations An animation block.
///
/// \param execute block A completion block that is executed once
/// the animations have completed.
///
+ (void (^ _Nullable)(BOOL))delay:(NSTimeInterval)time execute:(void (^ _Nonnull)(void))execute;
/// Cancels the delayed MotionDelayCancelBlock.
/// \param delayed completion An MotionDelayCancelBlock.
///
+ (void)cancelWithDelayed:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL))completion;
/// Disables the default animations set on CALayers.
/// \param animations A callback that wraps the animations to disable.
///
+ (void)disable:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations;
/// Runs an animation with a specified duration.
/// \param duration An animation duration time.
///
/// \param animations An animation block.
///
/// \param timingFunction A CAMediaTimingFunction.
///
/// \param completion A completion block that is executed once
/// the animations have completed.
///
+ (void)animateWithDuration:(CFTimeInterval)duration timingFunction:(CAMediaTimingFunction * _Nonnull)timingFunction animations:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(void))completion;
/// Creates a CAAnimationGroup.
/// \param animations An Array of CAAnimation objects.
///
/// \param timingFunction A CAMediaTimingFunction.
///
/// \param duration An animation duration time for the group.
///
///
/// returns:
/// A CAAnimationGroup.
+ (CAAnimationGroup * _Nonnull)animateWithGroup:(NSArray<CAAnimation *> * _Nonnull)animations timingFunction:(CAMediaTimingFunction * _Nonnull)timingFunction duration:(CFTimeInterval)duration SWIFT_WARN_UNUSED_RESULT;
@end


@interface Motion (SWIFT_EXTENSION(Material))
@end


@interface Motion (SWIFT_EXTENSION(Material)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForDismissal:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MotionAnimationFillMode, "MotionAnimationFillMode") {
  MotionAnimationFillModeForwards = 0,
  MotionAnimationFillModeBackwards = 1,
  MotionAnimationFillModeBoth = 2,
  MotionAnimationFillModeRemoved = 3,
};



@interface MotionController (SWIFT_EXTENSION(Material))
@end


@interface MotionController (SWIFT_EXTENSION(Material))
@end


@interface MotionController (SWIFT_EXTENSION(Material))
@end


@interface MotionController (SWIFT_EXTENSION(Material))
@end


@interface MotionController (SWIFT_EXTENSION(Material))
@end


@interface MotionController (SWIFT_EXTENSION(Material))
@end


@interface MotionController (SWIFT_EXTENSION(Material))
@end


@interface MotionController (SWIFT_EXTENSION(Material))
/// Updates the elapsed time for the interactive transition.
/// \param elapsedTime t the current progress, must be between -1…1.
///
- (void)updateWithElapsedTime:(NSTimeInterval)t;
/// Finish the interactive transition.
/// Will stop the interactive transition and animate from the
/// current state to the <em>end</em> state
/// \param isAnimated A boolean indicating if the completion is animated.
///
- (void)endWithIsAnimated:(BOOL)isAnimated;
/// Cancel the interactive transition.
/// Will stop the interactive transition and animate from the
/// current state to the <em>begining</em> state
/// \param isAnimated A boolean indicating if the completion is animated.
///
- (void)cancelWithIsAnimated:(BOOL)isAnimated;
@end


@interface MotionController (SWIFT_EXTENSION(Material))
@end


SWIFT_CLASS("_TtC8Material27MotionIndependentController")
@interface MotionIndependentController : MotionController
/// An initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Transitions source views to their corresponding destination view
/// within a given root view.
/// \param rootView A UIView.
///
/// \param fromViews An Array of UIViews.
///
/// \param toViews An Array of UIViews.
///
/// \param completion An optional callback.
///
- (void)transitionWithRootView:(UIView * _Nonnull)rootView fromViews:(NSArray<UIView *> * _Nonnull)fromViews toViews:(NSArray<UIView *> * _Nonnull)toViews completion:(void (^ _Nullable)(BOOL))completion;
@end


@interface MotionIndependentController (SWIFT_EXTENSION(Material))
@end


SWIFT_CLASS("_TtC8Material12MotionPlugin")
@interface MotionPlugin : NSObject
/// Determines whether or not to receive <code>seekTo</code> callback on every frame.
/// Default is false.
/// When <em>requirePerFrameCallback</em> is <em>false</em>, the plugin needs to start its own animations inside <code>animate</code> & <code>resume</code>
/// The <code>seekTo</code> method is only being called during an interactive transition.
/// When <em>requirePerFrameCallback</em> is <em>true</em>, the plugin will receive <code>seekTo</code> callback on every animation frame. Hence it is possible for the plugin to do per-frame animations without implementing <code>animate</code> & <code>resume</code>
@property (nonatomic) BOOL requirePerFrameCallback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Called before any animation.
/// Override this method when you want to preprocess transitions for views
/// To check a view’s transitions:
/// \code
/// context[view]
/// context[view, "transitionName"]
///
/// \endcodeTo set a view’s transitions:
/// \code
/// context[view] = [("transition1", ["parameter1"]), ("transition2", [])]
/// context[view, "transition1"] = ["parameter1", "parameter2"]
///
/// \endcode\param context object holding all parsed and changed transitions,
///
/// \param fromViews A flattened list of all views from source ViewController
///
/// \param toViews A flattened list of all views from destination ViewController
///
- (void)processFromViews:(NSArray<UIView *> * _Nonnull)fromViews toViews:(NSArray<UIView *> * _Nonnull)toViews;
/// \param context object holding all parsed and changed transitions,
///
/// \param view the view to check whether or not the plugin can handle the animation
///
/// \param isAppearing true if the view is isAppearing(i.e. a view in destination ViewController)
/// If return true, Motion won’t animate and won’t let any other plugins animate this view.
/// The view will also be hidden automatically during the animation.
///
///
/// returns:
/// return true if the plugin can handle animating the view.
- (BOOL)canAnimateWithView:(UIView * _Nonnull)view isAppearing:(BOOL)isAppearing SWIFT_WARN_UNUSED_RESULT;
/// Perform the animation.
/// Note: views in <code>fromViews</code> & <code>toViews</code> are hidden already. Unhide then if you need to take snapshots.
/// \param context object holding all parsed and changed transitions,
///
/// \param fromViews A flattened list of all views from source ViewController (filtered by <code>canAnimate</code>)
///
/// \param toViews A flattened list of all views from destination ViewController (filtered by <code>canAnimate</code>)
///
///
/// returns:
/// The duration needed to complete the animation
- (NSTimeInterval)animateFromViews:(NSArray<UIView *> * _Nonnull)fromViews toViews:(NSArray<UIView *> * _Nonnull)toViews SWIFT_WARN_UNUSED_RESULT;
/// Called when all animations are completed.
/// Should perform cleanup and release any reference
- (void)clean;
/// For supporting interactive animation only.
/// This method is called when an interactive animation is in place
/// The plugin should pause the animation, and seek to the given progress
/// \param elapsedTime time of the animation to seek to.
///
- (void)seekTo:(NSTimeInterval)elapsedTime;
/// For supporting interactive animation only.
/// This method is called when an interactive animation is ended
/// The plugin should resume the animation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     elapsedTime: will be the same value since last <code>seekTo</code>
///   </li>
///   <li>
///     reverse: a boolean value indicating whether or not the animation should reverse
///   </li>
/// </ul>
- (NSTimeInterval)resumeAt:(NSTimeInterval)elapsedTime isReversed:(BOOL)isReversed SWIFT_WARN_UNUSED_RESULT;
@end


@interface MotionPlugin (SWIFT_EXTENSION(Material))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isEnabled;)
+ (BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsEnabled:(BOOL)newValue;
+ (void)enable;
+ (void)disable;
@end


SWIFT_PROTOCOL_NAMED("MotionViewControllerDelegate")
@protocol MotionViewControllerDelegate
@optional
/// An optional delegation method that is executed motion will start the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWillStartTransitionWithMotion:(Motion * _Nonnull)motion;
/// An optional delegation method that is executed motion did end the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionDidEndTransitionWithMotion:(Motion * _Nonnull)motion;
/// An optional delegation method that is executed motion did cancel the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionDidCancelTransitionWithMotion:(Motion * _Nonnull)motion;
/// An optional delegation method that is executed when the source
/// view controller will start the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(Motion * _Nonnull)motion willStartTransitionFrom:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the source
/// view controller did end the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(Motion * _Nonnull)motion didEndTransitionFrom:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the source
/// view controller did cancel the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(Motion * _Nonnull)motion didCancelTransitionFrom:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the destination
/// view controller will start the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(Motion * _Nonnull)motion willStartTransitionTo:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the destination
/// view controller did end the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(Motion * _Nonnull)motion didEndTransitionTo:(UIViewController * _Nonnull)viewController;
/// An optional delegation method that is executed when the destination
/// view controller did cancel the transition.
/// \param motion A Motion instance.
///
/// \param willStartTransitionFrom viewController A UIViewController.
///
- (void)motionWithMotion:(Motion * _Nonnull)motion didCancelTransitionTo:(UIViewController * _Nonnull)viewController;
@end


@interface NSMutableAttributedString (SWIFT_EXTENSION(Material))
@end


@interface NSObject (SWIFT_EXTENSION(Material))
@end

@class UINavigationItem;

SWIFT_CLASS("_TtC8Material13NavigationBar")
@interface NavigationBar : UINavigationBar
/// Will layout the view.
@property (nonatomic, readonly) BOOL willLayout;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// A preset wrapper around contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset contentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets contentEdgeInsets;
/// A preset wrapper around interimSpace.
@property (nonatomic) enum InterimSpacePreset interimSpacePreset;
/// A wrapper around grid.interimSpace.
@property (nonatomic) CGFloat interimSpace;
/// Grid cell factor.
@property (nonatomic) CGFloat gridFactor;
/// The back button image writes to the backIndicatorImage property and
/// backIndicatorTransitionMaskImage property.
@property (nonatomic, strong) UIImage * _Nullable backButtonImage;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer.
- (nonnull instancetype)init;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)pushNavigationItem:(UINavigationItem * _Nonnull)item animated:(BOOL)animated;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS("_TtC8Material20NavigationController")
@interface NavigationController : UINavigationController
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a rootViewController.
/// \param rootViewController A UIViewController for the rootViewController.
///
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
/// Calls the layout functions for the view heirarchy.
- (void)layoutSubviews;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface NavigationController (SWIFT_EXTENSION(Material)) <UIGestureRecognizerDelegate>
/// Detects the gesture recognizer being used. This is necessary when using
/// NavigationDrawerController. It eliminates the conflict in panning.
/// \param gestureRecognizer A UIGestureRecognizer to detect.
///
/// \param touch The UITouch event.
///
///
/// returns:
/// A Boolean of whether to continue the gesture or not, true yes, false no.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@interface NavigationController (SWIFT_EXTENSION(Material)) <UINavigationBarDelegate>
/// Delegation method that is called when a new UINavigationItem is about to be pushed.
/// This is used to prepare the transitions between UIViewControllers on the stack.
/// \param navigationBar A UINavigationBar that is used in the NavigationController.
///
/// \param item The UINavigationItem that will be pushed on the stack.
///
///
/// returns:
/// A Boolean value that indicates whether to push the item on to the stack or not.
/// True is yes, false is no.
- (BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPushItem:(UINavigationItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
@end


@interface NavigationController (SWIFT_EXTENSION(Material))
/// Device status bar style.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@end

@protocol NavigationDrawerControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS_NAMED("NavigationDrawerController")
@interface NavigationDrawerController : TransitionController
/// A CGFloat property that accesses the leftView threshold of
/// the NavigationDrawerController. When the panning gesture has
/// ended, if the position is beyond the threshold,
/// the leftView is opened, if it is below the threshold, the
/// leftView is closed.
@property (nonatomic) CGFloat leftThreshold;
/// A CGFloat property that accesses the rightView threshold of
/// the NavigationDrawerController. When the panning gesture has
/// ended, if the position is beyond the threshold,
/// the rightView is closed, if it is below the threshold, the
/// rightView is opened.
@property (nonatomic) CGFloat rightThreshold;
/// A NavigationDrawerControllerDelegate property used to bind
/// the delegation object.
@property (nonatomic, weak) id <NavigationDrawerControllerDelegate> _Nullable delegate;
/// A CGFloat property that sets the animation duration of the
/// leftView when closing and opening. Defaults to 0.25.
@property (nonatomic) NSTimeInterval animationDuration;
/// A Boolean property that enables and disables the leftView from
/// opening and closing. Defaults to true.
@property (nonatomic) BOOL isEnabled;
/// A Boolean property that enables and disables the leftView from
/// opening and closing. Defaults to true.
@property (nonatomic) BOOL isLeftViewEnabled;
/// Enables the left pan gesture.
@property (nonatomic) BOOL isLeftPanGestureEnabled;
/// Enables the left tap gesture.
@property (nonatomic) BOOL isLeftTapGestureEnabled;
/// A Boolean property that enables and disables the rightView from
/// opening and closing. Defaults to true.
@property (nonatomic) BOOL isRightViewEnabled;
/// Enables the right pan gesture.
@property (nonatomic) BOOL isRightPanGestureEnabled;
/// Enables the right tap gesture.
@property (nonatomic) BOOL isRightTapGestureEnabled;
/// A Boolean property that triggers the status bar to be isHidden
/// when the leftView is opened. Defaults to true.
@property (nonatomic) BOOL isHiddenStatusBarEnabled;
/// A DepthPreset property that is used to set the depth of the
/// leftView when opened.
@property (nonatomic) enum DepthPreset depthPreset;
/// A UIView property that is used to hide and reveal the
/// leftViewController. It is very rare that this property will
/// need to be accessed externally.
@property (nonatomic, readonly, strong) UIView * _Nullable leftView;
/// A UIView property that is used to hide and reveal the
/// rightViewController. It is very rare that this property will
/// need to be accessed externally.
@property (nonatomic, readonly, strong) UIView * _Nullable rightView;
/// Indicates whether the leftView or rightView is opened.
@property (nonatomic, readonly) BOOL isOpened;
/// indicates if the leftView is opened.
@property (nonatomic, readonly) BOOL isLeftViewOpened;
/// Indicates if the rightView is opened.
@property (nonatomic, readonly) BOOL isRightViewOpened;
/// Content view controller to encompase the entire component. This is
/// primarily used when the StatusBar is being isHidden. The alpha value of
/// the rootViewController decreases, and shows the StatusBar. To avoid
/// this, and to add a isHidden transition viewController for complex
/// situations, the contentViewController was added.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;
/// A UIViewController property that references the
/// active left UIViewController.
@property (nonatomic, readonly, strong) UIViewController * _Nullable leftViewController;
/// A UIViewController property that references the
/// active right UIViewController.
@property (nonatomic, readonly, strong) UIViewController * _Nullable rightViewController;
/// A CGFloat property to access the width that the leftView
/// opens up to.
@property (nonatomic, readonly) CGFloat leftViewWidth;
/// A CGFloat property to access the width that the rightView
/// opens up to.
@property (nonatomic, readonly) CGFloat rightViewWidth;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with an Optional nib and bundle.
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// An initializer for the NavigationDrawerController.
/// \param rootViewController The main UIViewController.
///
/// \param leftViewController An Optional left UIViewController.
///
/// \param rightViewController An Optional right UIViewController.
///
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController leftViewController:(UIViewController * _Nullable)leftViewController rightViewController:(UIViewController * _Nullable)rightViewController OBJC_DESIGNATED_INITIALIZER;
- (void)transitionTo:(UIViewController * _Nonnull)viewController completion:(void (^ _Nullable)(BOOL))completion;
/// Layout subviews.
- (void)layoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)prepare;
/// A method that is used to set the width of the leftView when
/// opened. This is the recommended method of setting the leftView
/// width.
/// \param width A CGFloat value to set as the new width.
///
/// \param isHidden A Boolean value of whether the leftView
/// should be isHidden after the width has been updated or not.
///
/// \param animated A Boolean value that indicates to animate
/// the leftView width change.
///
- (void)setLeftViewWidthWithWidth:(CGFloat)width isHidden:(BOOL)isHidden animated:(BOOL)animated duration:(NSTimeInterval)duration;
/// A method that is used to set the width of the rightView when
/// opened. This is the recommended method of setting the rightView
/// width.
/// \param width A CGFloat value to set as the new width.
///
/// \param isHidden A Boolean value of whether the rightView
/// should be isHidden after the width has been updated or not.
///
/// \param animated A Boolean value that indicates to animate
/// the rightView width change.
///
- (void)setRightViewWidthWithWidth:(CGFloat)width isHidden:(BOOL)isHidden animated:(BOOL)animated duration:(NSTimeInterval)duration;
/// A method that toggles the leftView opened if previously closed,
/// or closed if previously opened.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)toggleLeftViewWithVelocity:(CGFloat)velocity;
/// A method that toggles the rightView opened if previously closed,
/// or closed if previously opened.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)toggleRightViewWithVelocity:(CGFloat)velocity;
/// A method that opens the leftView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)openLeftViewWithVelocity:(CGFloat)velocity;
/// A method that opens the rightView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)openRightViewWithVelocity:(CGFloat)velocity;
/// A method that closes the leftView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)closeLeftViewWithVelocity:(CGFloat)velocity;
/// A method that closes the rightView.
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
///
- (void)closeRightViewWithVelocity:(CGFloat)velocity;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end


@interface NavigationDrawerController (SWIFT_EXTENSION(Material)) <UIGestureRecognizerDelegate>
/// Detects the gesture recognizer being used.
/// \param gestureRecognizer A UIGestureRecognizer to detect.
///
/// \param touch The UITouch event.
///
///
/// returns:
/// A Boolean of whether to continue the gesture or not.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@interface NavigationDrawerController (SWIFT_EXTENSION(Material))
@end

enum NavigationDrawerPosition : NSInteger;

SWIFT_PROTOCOL_NAMED("NavigationDrawerControllerDelegate")
@protocol NavigationDrawerControllerDelegate
@optional
/// An optional delegation method that is fired before the
/// NavigationDrawerController opens.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController willOpen:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired after the
/// NavigationDrawerController opened.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didOpen:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired before the
/// NavigationDrawerController closes.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController willClose:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired after the
/// NavigationDrawerController closed.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didClose:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController pan gesture begins.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didBeginPanAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didBeginPanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController pan gesture changes position.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didChangePanAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didChangePanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController pan gesture ends.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didEndPanAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didEndPanAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// NavigationDrawerController tap gesture executes.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param didTapAt point A CGPoint.
///
/// \param position The NavigationDrawerPosition.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController didTapAt:(CGPoint)point position:(enum NavigationDrawerPosition)position;
/// An optional delegation method that is fired when the
/// status bar is about to change display, isHidden or not.
/// \param navigationDrawerController A NavigationDrawerController.
///
/// \param statusBar isHidden A boolean.
///
- (void)navigationDrawerControllerWithNavigationDrawerController:(NavigationDrawerController * _Nonnull)navigationDrawerController statusBar:(BOOL)isHidden;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, NavigationDrawerPosition, "NavigationDrawerPosition") {
  NavigationDrawerPositionLeft = 0,
  NavigationDrawerPositionRight = 1,
};


SWIFT_CLASS("_TtC8Material14NavigationItem")
@interface NavigationItem : NSObject
/// Should center the contentView.
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/// Back Button.
@property (nonatomic, readonly, strong) IconButton * _Nonnull backButton;
/// Content View.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Title label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// Detail label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// Left items.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/// Right items.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
/// Center items.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull centerViews;
/// An optional reference to the NavigationBar.
@property (nonatomic, readonly, strong) NavigationBar * _Nullable navigationBar;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material13PresenterCard")
@interface PresenterCard : Card
/// A preset wrapper around presenterViewEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset presenterViewEdgeInsetsPreset;
/// A reference to presenterViewEdgeInsets.
@property (nonatomic) UIEdgeInsets presenterViewEdgeInsets;
/// A reference to the presenterView.
@property (nonatomic, strong) UIView * _Nullable presenterView;
- (void)reload;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, PulseAnimation, "PulseAnimation") {
  PulseAnimationNone = 0,
  PulseAnimationCenter = 1,
  PulseAnimationCenterWithBacking = 2,
  PulseAnimationCenterRadialBeyondBounds = 3,
  PulseAnimationRadialBeyondBounds = 4,
  PulseAnimationBacking = 5,
  PulseAnimationPoint = 6,
  PulseAnimationPointWithBacking = 7,
};



@interface PulseView (SWIFT_EXTENSION(Material))
@end


SWIFT_CLASS("_TtC8Material12RaisedButton")
@interface RaisedButton : Button
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@protocol SearchBarDelegate;

SWIFT_CLASS("_TtC8Material9SearchBar")
@interface SearchBar : Bar
/// The UITextField for the searchBar.
@property (nonatomic, readonly, strong) UITextField * _Nonnull textField;
/// Reference to the clearButton.
@property (nonatomic, readonly, strong) IconButton * _Null_unspecified clearButton;
/// A reference to the delegate.
@property (nonatomic, weak) id <SearchBarDelegate> _Nullable delegate;
/// Handle the clearButton manually.
@property (nonatomic) BOOL isClearButtonAutoHandleEnabled;
/// TintColor for searchBar.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// TextColor for searchBar.
@property (nonatomic, strong) UIColor * _Nullable textColor;
/// Sets the textField placeholder value.
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// Placeholder text
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)prepare;
@end


@interface SearchBar (SWIFT_EXTENSION(Material))
@end


@interface SearchBar (SWIFT_EXTENSION(Material))
@end


@interface SearchBar (SWIFT_EXTENSION(Material))
/// Layout the textField.
- (void)layoutTextField;
/// Layout the leftView.
- (void)layoutLeftView;
/// Layout the clearButton.
- (void)layoutClearButton;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SearchBarAlignment, "SearchBarAlignment") {
  SearchBarAlignmentTop = 0,
  SearchBarAlignmentBottom = 1,
};


SWIFT_CLASS("_TtC8Material19StatusBarController")
@interface StatusBarController : TransitionController
/// A Display value to indicate whether or not to
/// display the rootViewController to the full view
/// bounds, or up to the toolbar height.
@property (nonatomic) enum DisplayStyle displayStyle;
/// Device status bar style.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Device visibility state.
@property (nonatomic) BOOL isStatusBarHidden;
/// An adjustment based on the rules for displaying the statusBar.
@property (nonatomic, readonly) CGFloat statusBarOffsetAdjustment;
/// A boolean that indicates to hide the statusBar on rotation.
@property (nonatomic) BOOL shouldHideStatusBarOnRotation;
/// A reference to the statusBar.
@property (nonatomic, readonly, strong) UIView * _Nonnull statusBar;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material19SearchBarController")
@interface SearchBarController : StatusBarController
/// Reference to the SearchBar.
@property (nonatomic, readonly, strong) SearchBar * _Nonnull searchBar;
/// The searchBar alignment.
@property (nonatomic) enum SearchBarAlignment searchBarAlignment;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


@interface SearchBarController (SWIFT_EXTENSION(Material))
@end


@interface SearchBarController (SWIFT_EXTENSION(Material))
@end


SWIFT_PROTOCOL_NAMED("SearchBarDelegate")
@protocol SearchBarDelegate
@optional
/// A delegation method that is executed when the textField changed.
/// \param searchBar A SearchBar.
///
/// \param didChange textField A UITextField.
///
/// \param with text An optional String.
///
- (void)searchBarWithSearchBar:(SearchBar * _Nonnull)searchBar didChange:(UITextField * _Nonnull)textField with:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField will clear.
/// \param searchBar A SearchBar.
///
/// \param willClear textField A UITextField.
///
/// \param with text An optional String.
///
- (void)searchBarWithSearchBar:(SearchBar * _Nonnull)searchBar willClear:(UITextField * _Nonnull)textField with:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField is cleared.
/// \param searchBar A SearchBar.
///
/// \param didClear textField A UITextField.
///
/// \param with text An optional String.
///
- (void)searchBarWithSearchBar:(SearchBar * _Nonnull)searchBar didClear:(UITextField * _Nonnull)textField with:(NSString * _Nullable)text;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ShapePreset, "ShapePreset") {
  ShapePresetNone = 0,
  ShapePresetSquare = 1,
  ShapePresetCircle = 2,
};

@class NSAttributedString;
enum SnackbarStatus : NSInteger;

SWIFT_CLASS("_TtC8Material8Snackbar")
@interface Snackbar : Bar
/// A convenience property to set the titleLabel text.
@property (nonatomic, copy) NSString * _Nullable text;
/// A convenience property to set the titleLabel attributedText.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
/// Text label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull textLabel;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// The status of the snackbar.
@property (nonatomic, readonly) enum SnackbarStatus status;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SnackbarAlignment, "SnackbarAlignment") {
  SnackbarAlignmentTop = 0,
  SnackbarAlignmentBottom = 1,
};

@protocol SnackbarControllerDelegate;

SWIFT_CLASS("_TtC8Material18SnackbarController")
@interface SnackbarController : TransitionController
/// Reference to the Snackbar.
@property (nonatomic, readonly, strong) Snackbar * _Nonnull snackbar;
/// A boolean indicating if the Snacbar is animating.
@property (nonatomic, readonly) BOOL isAnimating;
/// Delegation handler.
@property (nonatomic, weak) id <SnackbarControllerDelegate> _Nullable delegate;
/// Snackbar alignment setting.
@property (nonatomic) enum SnackbarAlignment snackbarAlignment;
/// A preset wrapper around snackbarEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset snackbarEdgeInsetsPreset;
/// A reference to snackbarEdgeInsets.
@property (nonatomic) UIEdgeInsets snackbarEdgeInsets;
/// Animates to a SnackbarStatus.
/// \param status A SnackbarStatus enum value.
///
- (void (^ _Nullable)(BOOL))animateWithSnackbar:(enum SnackbarStatus)status delay:(NSTimeInterval)delay animations:(void (^ _Nullable)(Snackbar * _Nonnull))animations completion:(void (^ _Nullable)(Snackbar * _Nonnull))completion;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)layoutSubviews;
/// Reloads the view.
- (void)reload;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("SnackbarControllerDelegate")
@protocol SnackbarControllerDelegate
@optional
/// A delegation method that is executed when a Snackbar will show.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController willShow:(Snackbar * _Nonnull)snackbar;
/// A delegation method that is executed when a Snackbar did show.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController didShow:(Snackbar * _Nonnull)snackbar;
/// A delegation method that is executed when a Snackbar will hide.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController willHide:(Snackbar * _Nonnull)snackbar;
/// A delegation method that is executed when a Snackbar did hide.
/// \param snackbarController A SnackbarController.
///
/// \param snackbar A Snackbar.
///
- (void)snackbarControllerWithSnackbarController:(SnackbarController * _Nonnull)snackbarController didHide:(Snackbar * _Nonnull)snackbar;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SnackbarStatus, "SnackbarStatus") {
  SnackbarStatusVisible = 0,
  SnackbarStatusHidden = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SpringDirection, "SpringDirection") {
  SpringDirectionUp = 0,
  SpringDirectionDown = 1,
  SpringDirectionLeft = 2,
  SpringDirectionRight = 3,
};



@interface StatusBarController (SWIFT_EXTENSION(Material))
@end

@protocol SwitchDelegate;
enum SwitchState : NSInteger;
enum SwitchStyle : NSInteger;
enum SwitchSize : NSInteger;

SWIFT_CLASS("_TtC8Material6Switch")
@interface Switch : UIControl
/// Will layout the view.
@property (nonatomic, readonly) BOOL willLayout;
/// An Optional delegation method.
@property (nonatomic, weak) id <SwitchDelegate> _Nullable delegate;
/// Indicates if the animation should bounce.
@property (nonatomic) BOOL isBounceable;
/// Button on color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOnColor;
/// Button off color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOffColor;
/// Track on color.
@property (nonatomic, strong) UIColor * _Nonnull trackOnColor;
/// Track off color.
@property (nonatomic, strong) UIColor * _Nonnull trackOffColor;
/// Button on disabled color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOnDisabledColor;
/// Track on disabled color.
@property (nonatomic, strong) UIColor * _Nonnull trackOnDisabledColor;
/// Button off disabled color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOffDisabledColor;
/// Track off disabled color.
@property (nonatomic, strong) UIColor * _Nonnull trackOffDisabledColor;
/// Track view reference.
@property (nonatomic, readonly, strong) UIView * _Nonnull track;
/// Button view reference.
@property (nonatomic, readonly, strong) FABButton * _Nonnull button;
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// A boolean indicating if the switch is on or not.
@property (nonatomic) BOOL isOn;
/// Switch state.
@property (nonatomic) enum SwitchState switchState;
/// Switch style.
@property (nonatomic) enum SwitchStyle switchStyle;
/// Switch size.
@property (nonatomic) enum SwitchSize switchSize;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init(state:style:size:) initializer, or set the CGRect
/// to CGRectNull.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// An initializer that sets the state, style, and size of the Switch instance.
/// \param state A SwitchState value.
///
/// \param style A SwitchStyle value.
///
/// \param size A SwitchSize value.
///
- (nonnull instancetype)initWithState:(enum SwitchState)state style:(enum SwitchStyle)style size:(enum SwitchSize)size OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// Reloads the view.
- (void)reload;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
/// Toggle the Switch state, if On will be Off, and if Off will be On.
/// \param completion An Optional completion block.
///
- (void)toggleWithCompletion:(void (^ _Nullable)(Switch * _Nonnull))completion;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


@interface Switch (SWIFT_EXTENSION(Material))
@end


@interface Switch (SWIFT_EXTENSION(Material))
/// Set the switchState property with an option to animate.
/// \param state The SwitchState to set.
///
/// \param animated A Boolean indicating to set the animation or not.
///
/// \param completion An Optional completion block.
///
- (void)setSwitchStateWithState:(enum SwitchState)state animated:(BOOL)animated completion:(void (^ _Nullable)(Switch * _Nonnull))completion;
@end


@interface Switch (SWIFT_EXTENSION(Material))
@end


@interface Switch (SWIFT_EXTENSION(Material))
@end


@interface Switch (SWIFT_EXTENSION(Material))
@end


SWIFT_PROTOCOL_NAMED("SwitchDelegate")
@protocol SwitchDelegate
/// A Switch delegate method for state changes.
/// \param control Switch control.
///
/// \param state SwitchState value.
///
- (void)switchDidChangeStateWithControl:(Switch * _Nonnull)control state:(enum SwitchState)state;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchSize, "SwitchSize") {
  SwitchSizeSmall = 0,
  SwitchSizeMedium = 1,
  SwitchSizeLarge = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchState, "SwitchState") {
  SwitchStateOn = 0,
  SwitchStateOff = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, SwitchStyle, "SwitchStyle") {
  SwitchStyleLight = 0,
  SwitchStyleDark = 1,
};

enum TabBarStyle : NSInteger;
@protocol TabBarDelegate;
@class TabItem;
enum TabBarLineAlignment : NSInteger;

SWIFT_CLASS("_TtC8Material6TabBar")
@interface TabBar : Bar
/// An enum that determines the tab bar style.
@property (nonatomic) enum TabBarStyle tabBarStyle;
/// A reference to the scroll view when the tab bar style is scrollable.
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull scrollView;
/// Enables and disables bouncing when swiping.
@property (nonatomic) BOOL isScrollBounceEnabled;
/// A delegation reference.
@property (nonatomic, weak) id <TabBarDelegate> _Nullable delegate;
/// The currently selected tabItem.
@property (nonatomic, readonly, strong) TabItem * _Nullable selectedTabItem;
/// A preset wrapper around tabItems contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset tabItemsContentEdgeInsetsPreset;
/// A reference to EdgeInsets.
@property (nonatomic) UIEdgeInsets tabItemsContentEdgeInsets;
/// A preset wrapper around tabItems interimSpace.
@property (nonatomic) enum InterimSpacePreset tabItemsInterimSpacePreset;
/// A wrapper around tabItems interimSpace.
@property (nonatomic) CGFloat tabItemsInterimSpace;
/// TabItems.
@property (nonatomic, copy) NSArray<TabItem *> * _Nonnull tabItems;
/// A reference to the line UIView.
@property (nonatomic, readonly, strong) UIView * _Nonnull line;
/// The line color.
@property (nonatomic, strong) UIColor * _Nullable lineColor;
/// A value for the line alignment.
@property (nonatomic) enum TabBarLineAlignment lineAlignment;
/// The line height.
@property (nonatomic) CGFloat lineHeight;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


@interface TabBar (SWIFT_EXTENSION(Material))
@end


@interface TabBar (SWIFT_EXTENSION(Material))
@end


@interface TabBar (SWIFT_EXTENSION(Material))
@end


@interface TabBar (SWIFT_EXTENSION(Material))
@end


@interface TabBar (SWIFT_EXTENSION(Material))
/// Selects a given index from the tabItems array.
/// <ul>
///   <li>
///     Paramater completion: An optional completion block.
///   </li>
/// </ul>
/// \param at index An Int.
///
- (void)selectAt:(NSInteger)index completion:(void (^ _Nullable)(TabItem * _Nonnull))completion;
/// Animates to a given tabItem.
/// \param to tabItem A TabItem.
///
/// \param completion An optional completion block.
///
- (void)animateTo:(TabItem * _Nonnull)tabItem completion:(void (^ _Nullable)(TabItem * _Nonnull))completion;
@end


@interface TabBar (SWIFT_EXTENSION(Material))
@end


@interface TabBar (SWIFT_EXTENSION(Material))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TabBarAlignment, "TabBarAlignment") {
  TabBarAlignmentTop = 0,
  TabBarAlignmentBottom = 1,
};


SWIFT_PROTOCOL_NAMED("TabBarDelegate")
@protocol TabBarDelegate
@optional
/// A delegation method that is executed when the tabItem will trigger the
/// animation to the next tab.
/// \param tabBar A TabBar.
///
/// \param tabItem A TabItem.
///
- (void)tabBarWithTabBar:(TabBar * _Nonnull)tabBar willSelect:(TabItem * _Nonnull)tabItem;
/// A delegation method that is executed when the tabItem did complete the
/// animation to the next tab.
/// \param tabBar A TabBar.
///
/// \param tabItem A TabItem.
///
- (void)tabBarWithTabBar:(TabBar * _Nonnull)tabBar didSelect:(TabItem * _Nonnull)tabItem;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TabBarLineAlignment, "TabBarLineAlignment") {
  TabBarLineAlignmentTop = 0,
  TabBarLineAlignmentBottom = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TabBarStyle, "TabBarStyle") {
  TabBarStyleAuto = 0,
  TabBarStyleNonScrollable = 1,
  TabBarStyleScrollable = 2,
};


SWIFT_CLASS("_TtC8Material7TabItem")
@interface TabItem : FlatButton
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material9TableView")
@interface TableView : UITableView
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param frame A CGRect defining the view’s frame.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame;
/// A convenience initializer that initializes the object.
- (nonnull instancetype)init;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


SWIFT_CLASS("_TtC8Material13TableViewCell")
@interface TableViewCell : UITableViewCell
/// A CAShapeLayer used to manage elements that would be affected by
/// the clipToBounds property of the backing layer. For example, this
/// allows the dropshadow effect on the backing layer, while clipping
/// the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;
/// PulseAnimation value.
@property (nonatomic) enum PulseAnimation pulseAnimation;
/// PulseAnimation color.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;
/// Pulse opacity.
@property (nonatomic) CGFloat pulseOpacity;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object.
/// \param style A UITableViewCellStyle enum.
///
/// \param reuseIdentifier A String identifier.
///
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Null_unspecified)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
/// A delegation method that is executed when the view has began a
/// touch event.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// ended.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// A delegation method that is executed when the view touch event has
/// been cancelled.
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
///
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


@interface TableViewCell (SWIFT_EXTENSION(Material))
@end


@interface TableViewCell (SWIFT_EXTENSION(Material))
@end


SWIFT_CLASS("_TtC8Material19TableViewController")
@interface TableViewController : UIViewController
/// A reference to a Reminder.
@property (nonatomic, readonly, strong) TableView * _Nonnull tableView;
- (void)viewDidLoad;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepareView method
/// to initialize property values and other setup operations.
/// The super.prepareView method should always be called immediately
/// when subclassing.
- (void)prepare;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TableViewController (SWIFT_EXTENSION(Material))
@end


@interface TableViewController (SWIFT_EXTENSION(Material))
@end


@interface TableViewController (SWIFT_EXTENSION(Material))
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Material14TabsController")
@interface TabsController : TransitionController
/// A Display value to indicate whether or not to
/// display the rootViewController to the full view
/// bounds, or up to the toolbar height.
@property (nonatomic) enum DisplayStyle displayStyle;
/// The TabBar used to switch between view controllers.
@property (nonatomic, readonly, strong) TabBar * _Nonnull tabBar;
/// An Array of UIViewControllers.
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull viewControllers;
/// A reference to the currently selected view controller index value.
@property (nonatomic, readonly) NSInteger selectedIndex;
/// The tabBar alignment.
@property (nonatomic) enum TabBarAlignment tabBarAlignment;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that accepts an Array of UIViewControllers.
/// \param viewControllers An Array of UIViewControllers.
///
- (nonnull instancetype)initWithViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers selectedIndex:(NSInteger)selectedIndex OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)layoutSubviews;
- (void)prepare;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface TabsController (SWIFT_EXTENSION(Material))
@end


@interface TabsController (SWIFT_EXTENSION(Material))
@end


@interface TabsController (SWIFT_EXTENSION(Material))
@end


@interface TabsController (SWIFT_EXTENSION(Material))
@end


@interface TabsController (SWIFT_EXTENSION(Material))
@end



@interface TextField (SWIFT_EXTENSION(Material))
@end


@interface TextField (SWIFT_EXTENSION(Material))
@end


@interface TextField (SWIFT_EXTENSION(Material))
@end


@interface TextField (SWIFT_EXTENSION(Material))
@end


@interface TextField (SWIFT_EXTENSION(Material))
@end


SWIFT_PROTOCOL_NAMED("TextFieldDelegate")
@protocol TextFieldDelegate <UITextFieldDelegate>
@optional
/// A delegation method that is executed when the textField changed.
/// \param textField A TextField.
///
/// \param didChange text An optional String.
///
- (void)textFieldWithTextField:(TextField * _Nonnull)textField didChange:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField will clear.
/// \param textField A TextField.
///
/// \param willClear text An optional String.
///
- (void)textFieldWithTextField:(TextField * _Nonnull)textField willClear:(NSString * _Nullable)text;
/// A delegation method that is executed when the textField is cleared.
/// \param textField A TextField.
///
/// \param didClear text An optional String.
///
- (void)textFieldWithTextField:(TextField * _Nonnull)textField didClear:(NSString * _Nullable)text;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TextFieldPlaceholderAnimation, "TextFieldPlaceholderAnimation") {
  TextFieldPlaceholderAnimationDefault = 0,
  TextFieldPlaceholderAnimationHidden = 1,
};

@class NSRegularExpression;
@class NSDictionary;

SWIFT_CLASS("_TtC8Material11TextStorage")
@interface TextStorage : NSTextStorage
/// A storage facility for attributed text.
@property (nonatomic, readonly, strong) NSMutableAttributedString * _Nonnull storage;
/// The regular expression to match text fragments against.
@property (nonatomic, strong) NSRegularExpression * _Nullable expression;
/// Initializer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithFileURL:(NSURL * _Nonnull)url options:(NSDictionary * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithData:(NSData * _Nonnull)data options:(NSDictionary<NSString *, id> * _Nonnull)options documentAttributes:(NSDictionary * _Nullable * _Nullable)dict error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)str SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithString:(NSString * _Nonnull)str attributes:(NSDictionary<NSString *, id> * _Nullable)attrs SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithAttributedString:(NSAttributedString * _Nonnull)attrStr SWIFT_UNAVAILABLE;
@end


@interface TextStorage (SWIFT_EXTENSION(Material))
/// A String value of the attirbutedString property.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/// Processes the text when editing.
- (void)processEditing;
/// Returns the attributes for the character at a given index.
/// \param location An Int
///
/// \param effectiveRange range Upon return, the range over which the
/// attributes and values are the same as those at index. This range
/// isn’t necessarily the maximum range covered, and its extent is
/// implementation-dependent. If you need the maximum range, use
/// attributesAtIndex:longestEffectiveRange:inRange:.
/// If you don’t need this value, pass NULL.
///
///
/// returns:
/// The attributes for the character at index.
- (NSDictionary<NSString *, id> * _Nonnull)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Nullable)range SWIFT_WARN_UNUSED_RESULT;
/// Replaces a range of text with a string value.
/// \param range The character range to replace.
///
/// \param str The string value that the characters
/// will be replaced with.
///
- (void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)str;
/// Sets the attributedString attribute values.
/// \param attrs The attributes to set.
///
/// \param range A range of characters that will have their
/// attributes updated.
///
- (void)setAttributes:(NSDictionary<NSString *, id> * _Nullable)attrs range:(NSRange)range;
/// Adds an individual attribute.
/// <ul>
///   <li>
///     _ name: Attribute name.
///   </li>
/// </ul>
/// \param value An Any type.
///
/// \param range A range of characters that will have their
/// attributes added.
///
- (void)addAttribute:(NSString * _Nonnull)name value:(id _Nonnull)value range:(NSRange)range;
/// Removes an individual attribute.
/// <ul>
///   <li>
///     _ name: Attribute name.
///   </li>
/// </ul>
/// \param range A range of characters that will have their
/// attributes removed.
///
- (void)removeAttribute:(NSString * _Nonnull)name range:(NSRange)range;
@end

@class NSTextCheckingResult;

SWIFT_PROTOCOL_NAMED("TextStorageDelegate")
@protocol TextStorageDelegate <NSTextStorageDelegate>
@optional
/// A delegation method that is executed when text will be
/// processed during editing.
/// \param textStorage A TextStorage.
///
/// \param willProcessEditing text A String.
///
/// \param range A NSRange.
///
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage willProcessEditing:(NSString * _Nonnull)text range:(NSRange)range;
/// A delegation method that is executed when text has been
/// processed after editing.
/// \param textStorage A TextStorage.
///
/// \param didProcessEditing text A String.
///
/// \param result An optional NSTextCheckingResult.
///
/// \param flags NSRegularExpression.MatchingFlags.
///
/// \param top An UnsafeMutablePointer<ObjCBool>.
///
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage didProcessEditing:(NSString * _Nonnull)text result:(NSTextCheckingResult * _Nullable)result flags:(NSMatchingFlags)flags stop:(BOOL * _Nonnull)stop;
@end

@class NSTextContainer;

SWIFT_CLASS("_TtC8Material8TextView")
@interface TextView : UITextView
/// A boolean indicating whether the text is empty.
@property (nonatomic, readonly) BOOL isEmpty;
/// A boolean indicating whether the text is in edit mode.
@property (nonatomic, readonly) BOOL isEditing;
/// Is the keyboard hidden.
@property (nonatomic, readonly) BOOL isKeyboardHidden;
/// A property that accesses the backing layer’s background
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The placeholderLabel font value.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The placeholderLabel text value.
@property (nonatomic, copy) NSString * _Nullable placeholder;
/// The placeholder UILabel.
@property (nonatomic, readonly, strong) UILabel * _Nonnull placeholderLabel;
/// Placeholder normal text
@property (nonatomic, strong) UIColor * _Nonnull placeholderNormalColor;
/// Placeholder active text
@property (nonatomic, strong) UIColor * _Nonnull placeholderActiveColor;
/// NSTextContainer EdgeInsets preset property.
@property (nonatomic) enum EdgeInsetsPreset textContainerInsetsPreset;
/// NSTextContainer EdgeInsets property.
@property (nonatomic) UIEdgeInsets textContainerInsets;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// The string pattern to match within the textStorage.
@property (nonatomic, copy) NSString * _Nonnull pattern;
/// A reference to the textView text.
@property (nonatomic, copy) NSString * _Null_unspecified text;
/// A convenience property that accesses the textStorage
/// string.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;
/// An Array of matches that match the pattern expression.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull matches;
/// An Array of unique matches that match the pattern
/// expression.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull uniqueMatches;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
/// \param textContainer A NSTextContainer instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer that is mostly used with AutoLayout.
/// \param textContainer A NSTextContainer instance.
///
- (nonnull instancetype)initWithTextContainer:(NSTextContainer * _Nullable)textContainer;
/// A convenience initializer that constructs all aspects of the textView.
- (nonnull instancetype)init;
- (void)layoutSubviews;
/// Prepares the view instance when intialized. When subclassing,
/// it is recommended to override the prepare method
/// to initialize property values and other setup operations.
/// The super.prepare method should always be called immediately
/// when subclassing.
- (void)prepare;
@end


@interface TextView (SWIFT_EXTENSION(Material))
@end


@interface TextView (SWIFT_EXTENSION(Material))
@end


@interface TextView (SWIFT_EXTENSION(Material)) <TextStorageDelegate>
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage willProcessEditing:(NSString * _Nonnull)text range:(NSRange)range;
- (void)textStorageWithTextStorage:(TextStorage * _Nonnull)textStorage didProcessEditing:(NSString * _Nonnull)text result:(NSTextCheckingResult * _Nullable)result flags:(NSMatchingFlags)flags stop:(BOOL * _Nonnull)stop;
@end


@interface TextView (SWIFT_EXTENSION(Material))
@end


@interface TextView (SWIFT_EXTENSION(Material))
@end

@class NSValue;

SWIFT_PROTOCOL_NAMED("TextViewDelegate")
@protocol TextViewDelegate <UITextViewDelegate>
@optional
/// A delegation method that is executed when the keyboard will open.
/// \param textView A TextView.
///
/// \param willShowKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView willShowKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when the keyboard will close.
/// \param textView A TextView.
///
/// \param willHideKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView willHideKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when the keyboard did open.
/// \param textView A TextView.
///
/// \param didShowKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView didShowKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when the keyboard did close.
/// \param textView A TextView.
///
/// \param didHideKeyboard value A NSValue.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView didHideKeyboard:(NSValue * _Nonnull)value;
/// A delegation method that is executed when text will be
/// processed during editing.
/// \param textView A TextView.
///
/// \param willProcessEditing textStorage A TextStorage.
///
/// \param text A String.
///
/// \param range A NSRange.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView willProcessEditing:(TextStorage * _Nonnull)textStorage text:(NSString * _Nonnull)text range:(NSRange)range;
/// A delegation method that is executed when text has been
/// processed after editing.
/// \param textView A TextView.
///
/// \param didProcessEditing textStorage A TextStorage.
///
/// \param text A String.
///
/// \param range A NSRange.
///
- (void)textViewWithTextView:(TextView * _Nonnull)textView didProcessEditing:(TextStorage * _Nonnull)textStorage text:(NSString * _Nonnull)text range:(NSRange)range;
@end


SWIFT_CLASS("_TtC8Material7Toolbar")
@interface Toolbar : Bar
/// A convenience property to set the titleLabel.text.
@property (nonatomic, copy) NSString * _Nullable title;
/// Title label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// A convenience property to set the detailLabel.text.
@property (nonatomic, copy) NSString * _Nullable detail;
/// Detail label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// An initializer that initializes the object with a NSCoder object.
/// \param aDecoder A NSCoder instance.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// An initializer that initializes the object with a CGRect object.
/// If AutoLayout is used, it is better to initilize the instance
/// using the init() initializer.
/// \param frame A CGRect instance.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)layoutSubviews;
- (void)prepare;
@end


@interface Toolbar (SWIFT_EXTENSION(Material))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ToolbarAlignment, "ToolbarAlignment") {
  ToolbarAlignmentTop = 0,
  ToolbarAlignmentBottom = 1,
};


SWIFT_CLASS_NAMED("ToolbarController")
@interface ToolbarController : StatusBarController
/// Reference to the Toolbar.
@property (nonatomic, readonly, strong) Toolbar * _Nonnull toolbar;
/// The toolbar alignment.
@property (nonatomic) enum ToolbarAlignment toolbarAlignment;
- (void)layoutSubviews;
- (void)prepare;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


@interface ToolbarController (SWIFT_EXTENSION(Material))
@end


@interface ToolbarController (SWIFT_EXTENSION(Material))
@end



@interface TransitionController (SWIFT_EXTENSION(Material))
@end


@interface UIColor (SWIFT_EXTENSION(Material))
@end


@interface UIFont (SWIFT_EXTENSION(Material))
/// Calculates a CGSize value based on a width and length of a string with a
/// given UIFont.
/// <ul>
///   <li>
///     Returns a CGSize.
///   </li>
/// </ul>
/// \param string A String.
///
/// \param constrainedTo width A CGFloat.
///
- (CGSize)stringSizeWithString:(NSString * _Nonnull)string constrainedTo:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Applies a blur effect to a UIImage.
/// \param radius The radius of the blur effect.
///
/// \param tintColor The color used for the blur effect (optional).
///
/// \param saturationDeltaFactor The delta factor for the saturation of the blur effect.
///
///
/// returns:
/// a UIImage.
- (UIImage * _Nullable)blurWithRadius:(CGFloat)radius tintColor:(UIColor * _Nullable)tintColor saturationDeltaFactor:(CGFloat)saturationDeltaFactor SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Adjusts the orientation of the image from the capture orientation.
/// This is an issue when taking images, the capture orientation is not set correctly
/// when using Portrait.
///
/// returns:
/// An optional UIImage if successful.
- (UIImage * _Nullable)adjustOrientation SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Creates a new image with the passed in color.
/// \param color The UIColor to create the image from.
///
///
/// returns:
/// A UIImage that is the color passed in.
- (UIImage * _Nullable)tintWith:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Creates an Image that is a color.
/// \param color The UIColor to create the image from.
///
/// \param size The size of the image to create.
///
///
/// returns:
/// A UIImage that is the color passed in.
+ (UIImage * _Nullable)imageWith:(UIColor * _Nonnull)color size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Crops an image to a specified width and height.
/// \param toWidth tw A specified width.
///
/// \param toHeight th A specified height.
///
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)cropToWidth:(CGFloat)tw toHeight:(CGFloat)th SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Creates a clear image.
///
/// returns:
/// A UIImage that is clear.
+ (UIImage * _Nullable)clearWithSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Asynchronously load images with a completion block.
/// \param URL A URL destination to fetch the image from.
///
/// \param completion A completion block that is executed once the image
/// has been retrieved.
///
+ (void)contentsOfURLWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Resizes an image based on a given width.
/// \param toWidth w A width value.
///
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)resizeToWidth:(CGFloat)w SWIFT_WARN_UNUSED_RESULT;
/// Resizes an image based on a given height.
/// \param toHeight h A height value.
///
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)resizeToHeight:(CGFloat)h SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(Material))
/// Width of the UIImage.
@property (nonatomic, readonly) CGFloat width;
/// Height of the UIImage.
@property (nonatomic, readonly) CGFloat height;
@end


@interface UINavigationController (SWIFT_EXTENSION(Material))
@end


@interface UINavigationItem (SWIFT_EXTENSION(Material))
/// NavigationItem reference.
@property (nonatomic, readonly, strong) NavigationItem * _Nonnull navigationItem;
/// Should center the contentView.
@property (nonatomic) enum ContentViewAlignment contentViewAlignment;
/// Content View.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Back Button.
@property (nonatomic, readonly, strong) IconButton * _Nonnull backButton;
/// Title Label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;
/// Detail text.
@property (nonatomic, copy) NSString * _Nullable detail;
/// Detail Label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;
/// Left side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull leftViews;
/// Right side UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull rightViews;
/// Center UIViews.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull centerViews;
@end


@interface UITabBarController (SWIFT_EXTENSION(Material))
@end


@interface UIView (SWIFT_EXTENSION(Material))
@end


@interface UIView (SWIFT_EXTENSION(Material))
@end


@interface UIView (SWIFT_EXTENSION(Material))
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// A reference to grid’s layoutEdgeInsetsPreset.
@property (nonatomic) enum EdgeInsetsPreset layoutEdgeInsetsPreset;
/// A reference to grid’s layoutEdgeInsets.
@property (nonatomic) UIEdgeInsets layoutEdgeInsets;
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// A boolean that indicates whether motion is enabled.
@property (nonatomic) BOOL isMotionEnabled;
/// An identifier value used to connect views across UIViewControllers.
@property (nonatomic, copy) NSString * _Nullable motionIdentifier;
/// A function that accepts an Array of CAAnimation objects and executes
/// them on the view’s backing layer.
/// \param animations An Array of CAAnimations.
///
- (void)animate:(NSArray<CAAnimation *> * _Nonnull)animations;
@end


@interface UIView (SWIFT_EXTENSION(Material))
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// A preset wrapper around divider.contentEdgeInsets.
@property (nonatomic) enum EdgeInsetsPreset dividerContentEdgeInsetsPreset;
/// A reference to divider.contentEdgeInsets.
@property (nonatomic) UIEdgeInsets dividerContentEdgeInsets;
/// Divider color.
@property (nonatomic, strong) UIColor * _Nullable dividerColor;
/// Divider visibility.
@property (nonatomic) BOOL isDividerHidden;
/// Divider animation.
@property (nonatomic) enum DividerAlignment dividerAlignment;
/// Divider thickness.
@property (nonatomic) CGFloat dividerThickness;
/// Sets the divider frame.
- (void)layoutDivider;
@end


@interface UIView (SWIFT_EXTENSION(Material))
/// A property that accesses the backing layer’s masksToBounds.
@property (nonatomic) BOOL masksToBounds;
/// A property that accesses the backing layer’s opacity.
@property (nonatomic) float opacity;
/// A property that accesses the backing layer’s anchorPoint.
@property (nonatomic) CGPoint anchorPoint;
/// A property that accesses the frame.origin.x property.
@property (nonatomic) CGFloat x;
/// A property that accesses the frame.origin.y property.
@property (nonatomic) CGFloat y;
/// A property that accesses the frame.size.width property.
@property (nonatomic) CGFloat width;
/// A property that accesses the frame.size.height property.
@property (nonatomic) CGFloat height;
/// HeightPreset value.
@property (nonatomic) enum HeightPreset heightPreset;
/// A property that manages the overall shape for the object. If either the
/// width or height property is set, the other will be automatically adjusted
/// to maintain the shape of the object.
@property (nonatomic) enum ShapePreset shapePreset;
/// A preset value for Depth.
@property (nonatomic) enum DepthPreset depthPreset;
/// A property that accesses the backing layer’s shadow
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
/// A property that accesses the backing layer’s shadowOffset.
@property (nonatomic) CGSize shadowOffset;
/// A property that accesses the backing layer’s shadowOpacity.
@property (nonatomic) float shadowOpacity;
/// A property that accesses the backing layer’s shadowRadius.
@property (nonatomic) CGFloat shadowRadius;
/// A property that accesses the backing layer’s shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;
/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL isShadowPathAutoSizing;
/// A property that sets the cornerRadius of the backing layer.
@property (nonatomic) enum CornerRadiusPreset cornerRadiusPreset;
/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;
/// A preset property to set the borderWidth.
@property (nonatomic) enum BorderWidthPreset borderWidthPreset;
/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;
/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;
/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;
/// Manages the layout for the shape of the view instance.
- (void)layoutShape;
/// Sets the shadow path.
- (void)layoutShadowPath;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the ChipBarController.
/// This is the recommended method of accessing the ChipBarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) ChipBarController * _Nullable chipsController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the CardCollectionViewController.
/// This is the recommended method of accessing the CardCollectionViewController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) CardCollectionViewController * _Nullable cardCollectionViewController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the SnackbarController.
/// This is the recommended method of accessing the SnackbarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) SnackbarController * _Nullable snackbarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the StatusBarController.
/// This is the recommended method of accessing the StatusBarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) StatusBarController * _Nullable statusBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the NavigationDrawerController.
/// This is the recommended method of accessing the NavigationDrawerController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) NavigationDrawerController * _Nullable navigationDrawerController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the FABMenuController.
/// This is the recommended method of accessing the FABMenuController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) FABMenuController * _Nullable fabMenuController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the TabsController.
/// This is the recommended method of accessing the TabsController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) TabsController * _Nullable tabsController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the SearchBarController.
/// This is the recommended method of accessing the SearchBarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) SearchBarController * _Nullable searchBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the TableViewController.
/// This is the recommended method of accessing the TableViewController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) TableViewController * _Nullable tableViewController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the CollectionViewController.
/// This is the recommended method of accessing the CollectionViewController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) CollectionViewController * _Nullable collectionViewController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the BottomNavigationController.
/// This is the recommended method of accessing the BottomNavigationController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) BottomNavigationController * _Nullable bottomNavigationController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A convenience property that provides access to the ToolbarController.
/// This is the recommended method of accessing the ToolbarController
/// through child UIViewControllers.
@property (nonatomic, readonly, strong) ToolbarController * _Nullable toolbarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// tabItem reference.
@property (nonatomic, readonly, strong) TabItem * _Nonnull tabItem;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// Dismiss the current view controller with animation. Will perform a
/// navigationController.popViewController if the current view controller
/// is contained inside a navigationController
- (IBAction)motionDismissViewController;
/// Unwind to the root view controller using Motion.
- (IBAction)motionUnwindToRootViewController;
/// Unwind to a specific view controller using Motion.
- (void)motionUnwindToViewController:(UIViewController * _Nonnull)toViewController;
/// Unwind to a view controller that responds to the given selector using Motion.
- (void)motionUnwindToViewControllerWithSelector:(SEL _Nonnull)withSelector;
/// Unwind to a view controller with given class using Motion
- (void)motionUnwindToViewControllerWithClass:(Class _Nonnull)withClass;
/// Unwind to a view controller that the matchBlock returns true on.
- (void)motionUnwindToViewControllerWithMatchBlock:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(UIViewController * _Nonnull))withMatchBlock;
/// Replace the current view controller with another view controller within the
/// navigation/modal stack.
/// \param with next A UIViewController.
///
- (void)motionReplaceViewControllerWith:(UIViewController * _Nonnull)next;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))
/// A boolean that indicates whether Motion is enabled or disabled.
@property (nonatomic) BOOL isMotionEnabled;
@end


@interface UIWindow (SWIFT_EXTENSION(Material))
/// Captures a screenshot of the contents in the apps keyWindow.
///
/// returns:
/// An optional UIImage.
- (UIImage * _Nullable)capture SWIFT_WARN_UNUSED_RESULT;
@end



@interface View (SWIFT_EXTENSION(Material))
@end


@interface View (SWIFT_EXTENSION(Material))
@end

#pragma clang diagnostic pop
